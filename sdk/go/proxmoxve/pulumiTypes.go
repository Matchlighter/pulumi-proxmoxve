// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package proxmoxve

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

type LXCContainerFeature struct {
	Fuse    *bool   `pulumi:"fuse"`
	Keyctl  *bool   `pulumi:"keyctl"`
	Mount   *string `pulumi:"mount"`
	Nesting *bool   `pulumi:"nesting"`
}

// LXCContainerFeatureInput is an input type that accepts LXCContainerFeatureArgs and LXCContainerFeatureOutput values.
// You can construct a concrete instance of `LXCContainerFeatureInput` via:
//
//          LXCContainerFeatureArgs{...}
type LXCContainerFeatureInput interface {
	pulumi.Input

	ToLXCContainerFeatureOutput() LXCContainerFeatureOutput
	ToLXCContainerFeatureOutputWithContext(context.Context) LXCContainerFeatureOutput
}

type LXCContainerFeatureArgs struct {
	Fuse    pulumi.BoolPtrInput   `pulumi:"fuse"`
	Keyctl  pulumi.BoolPtrInput   `pulumi:"keyctl"`
	Mount   pulumi.StringPtrInput `pulumi:"mount"`
	Nesting pulumi.BoolPtrInput   `pulumi:"nesting"`
}

func (LXCContainerFeatureArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LXCContainerFeature)(nil)).Elem()
}

func (i LXCContainerFeatureArgs) ToLXCContainerFeatureOutput() LXCContainerFeatureOutput {
	return i.ToLXCContainerFeatureOutputWithContext(context.Background())
}

func (i LXCContainerFeatureArgs) ToLXCContainerFeatureOutputWithContext(ctx context.Context) LXCContainerFeatureOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LXCContainerFeatureOutput)
}

// LXCContainerFeatureArrayInput is an input type that accepts LXCContainerFeatureArray and LXCContainerFeatureArrayOutput values.
// You can construct a concrete instance of `LXCContainerFeatureArrayInput` via:
//
//          LXCContainerFeatureArray{ LXCContainerFeatureArgs{...} }
type LXCContainerFeatureArrayInput interface {
	pulumi.Input

	ToLXCContainerFeatureArrayOutput() LXCContainerFeatureArrayOutput
	ToLXCContainerFeatureArrayOutputWithContext(context.Context) LXCContainerFeatureArrayOutput
}

type LXCContainerFeatureArray []LXCContainerFeatureInput

func (LXCContainerFeatureArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LXCContainerFeature)(nil)).Elem()
}

func (i LXCContainerFeatureArray) ToLXCContainerFeatureArrayOutput() LXCContainerFeatureArrayOutput {
	return i.ToLXCContainerFeatureArrayOutputWithContext(context.Background())
}

func (i LXCContainerFeatureArray) ToLXCContainerFeatureArrayOutputWithContext(ctx context.Context) LXCContainerFeatureArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LXCContainerFeatureArrayOutput)
}

type LXCContainerFeatureOutput struct{ *pulumi.OutputState }

func (LXCContainerFeatureOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LXCContainerFeature)(nil)).Elem()
}

func (o LXCContainerFeatureOutput) ToLXCContainerFeatureOutput() LXCContainerFeatureOutput {
	return o
}

func (o LXCContainerFeatureOutput) ToLXCContainerFeatureOutputWithContext(ctx context.Context) LXCContainerFeatureOutput {
	return o
}

func (o LXCContainerFeatureOutput) Fuse() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LXCContainerFeature) *bool { return v.Fuse }).(pulumi.BoolPtrOutput)
}

func (o LXCContainerFeatureOutput) Keyctl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LXCContainerFeature) *bool { return v.Keyctl }).(pulumi.BoolPtrOutput)
}

func (o LXCContainerFeatureOutput) Mount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LXCContainerFeature) *string { return v.Mount }).(pulumi.StringPtrOutput)
}

func (o LXCContainerFeatureOutput) Nesting() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LXCContainerFeature) *bool { return v.Nesting }).(pulumi.BoolPtrOutput)
}

type LXCContainerFeatureArrayOutput struct{ *pulumi.OutputState }

func (LXCContainerFeatureArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LXCContainerFeature)(nil)).Elem()
}

func (o LXCContainerFeatureArrayOutput) ToLXCContainerFeatureArrayOutput() LXCContainerFeatureArrayOutput {
	return o
}

func (o LXCContainerFeatureArrayOutput) ToLXCContainerFeatureArrayOutputWithContext(ctx context.Context) LXCContainerFeatureArrayOutput {
	return o
}

func (o LXCContainerFeatureArrayOutput) Index(i pulumi.IntInput) LXCContainerFeatureOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LXCContainerFeature {
		return vs[0].([]LXCContainerFeature)[vs[1].(int)]
	}).(LXCContainerFeatureOutput)
}

type LXCContainerMountpoint struct {
	Acl       *bool  `pulumi:"acl"`
	Backup    *bool  `pulumi:"backup"`
	Mp        string `pulumi:"mp"`
	Quota     *bool  `pulumi:"quota"`
	Replicate *bool  `pulumi:"replicate"`
	Shared    *bool  `pulumi:"shared"`
	Size      *int   `pulumi:"size"`
	Volume    string `pulumi:"volume"`
}

// LXCContainerMountpointInput is an input type that accepts LXCContainerMountpointArgs and LXCContainerMountpointOutput values.
// You can construct a concrete instance of `LXCContainerMountpointInput` via:
//
//          LXCContainerMountpointArgs{...}
type LXCContainerMountpointInput interface {
	pulumi.Input

	ToLXCContainerMountpointOutput() LXCContainerMountpointOutput
	ToLXCContainerMountpointOutputWithContext(context.Context) LXCContainerMountpointOutput
}

type LXCContainerMountpointArgs struct {
	Acl       pulumi.BoolPtrInput `pulumi:"acl"`
	Backup    pulumi.BoolPtrInput `pulumi:"backup"`
	Mp        pulumi.StringInput  `pulumi:"mp"`
	Quota     pulumi.BoolPtrInput `pulumi:"quota"`
	Replicate pulumi.BoolPtrInput `pulumi:"replicate"`
	Shared    pulumi.BoolPtrInput `pulumi:"shared"`
	Size      pulumi.IntPtrInput  `pulumi:"size"`
	Volume    pulumi.StringInput  `pulumi:"volume"`
}

func (LXCContainerMountpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LXCContainerMountpoint)(nil)).Elem()
}

func (i LXCContainerMountpointArgs) ToLXCContainerMountpointOutput() LXCContainerMountpointOutput {
	return i.ToLXCContainerMountpointOutputWithContext(context.Background())
}

func (i LXCContainerMountpointArgs) ToLXCContainerMountpointOutputWithContext(ctx context.Context) LXCContainerMountpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LXCContainerMountpointOutput)
}

// LXCContainerMountpointArrayInput is an input type that accepts LXCContainerMountpointArray and LXCContainerMountpointArrayOutput values.
// You can construct a concrete instance of `LXCContainerMountpointArrayInput` via:
//
//          LXCContainerMountpointArray{ LXCContainerMountpointArgs{...} }
type LXCContainerMountpointArrayInput interface {
	pulumi.Input

	ToLXCContainerMountpointArrayOutput() LXCContainerMountpointArrayOutput
	ToLXCContainerMountpointArrayOutputWithContext(context.Context) LXCContainerMountpointArrayOutput
}

type LXCContainerMountpointArray []LXCContainerMountpointInput

func (LXCContainerMountpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LXCContainerMountpoint)(nil)).Elem()
}

func (i LXCContainerMountpointArray) ToLXCContainerMountpointArrayOutput() LXCContainerMountpointArrayOutput {
	return i.ToLXCContainerMountpointArrayOutputWithContext(context.Background())
}

func (i LXCContainerMountpointArray) ToLXCContainerMountpointArrayOutputWithContext(ctx context.Context) LXCContainerMountpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LXCContainerMountpointArrayOutput)
}

type LXCContainerMountpointOutput struct{ *pulumi.OutputState }

func (LXCContainerMountpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LXCContainerMountpoint)(nil)).Elem()
}

func (o LXCContainerMountpointOutput) ToLXCContainerMountpointOutput() LXCContainerMountpointOutput {
	return o
}

func (o LXCContainerMountpointOutput) ToLXCContainerMountpointOutputWithContext(ctx context.Context) LXCContainerMountpointOutput {
	return o
}

func (o LXCContainerMountpointOutput) Acl() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LXCContainerMountpoint) *bool { return v.Acl }).(pulumi.BoolPtrOutput)
}

func (o LXCContainerMountpointOutput) Backup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LXCContainerMountpoint) *bool { return v.Backup }).(pulumi.BoolPtrOutput)
}

func (o LXCContainerMountpointOutput) Mp() pulumi.StringOutput {
	return o.ApplyT(func(v LXCContainerMountpoint) string { return v.Mp }).(pulumi.StringOutput)
}

func (o LXCContainerMountpointOutput) Quota() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LXCContainerMountpoint) *bool { return v.Quota }).(pulumi.BoolPtrOutput)
}

func (o LXCContainerMountpointOutput) Replicate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LXCContainerMountpoint) *bool { return v.Replicate }).(pulumi.BoolPtrOutput)
}

func (o LXCContainerMountpointOutput) Shared() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LXCContainerMountpoint) *bool { return v.Shared }).(pulumi.BoolPtrOutput)
}

func (o LXCContainerMountpointOutput) Size() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LXCContainerMountpoint) *int { return v.Size }).(pulumi.IntPtrOutput)
}

func (o LXCContainerMountpointOutput) Volume() pulumi.StringOutput {
	return o.ApplyT(func(v LXCContainerMountpoint) string { return v.Volume }).(pulumi.StringOutput)
}

type LXCContainerMountpointArrayOutput struct{ *pulumi.OutputState }

func (LXCContainerMountpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LXCContainerMountpoint)(nil)).Elem()
}

func (o LXCContainerMountpointArrayOutput) ToLXCContainerMountpointArrayOutput() LXCContainerMountpointArrayOutput {
	return o
}

func (o LXCContainerMountpointArrayOutput) ToLXCContainerMountpointArrayOutputWithContext(ctx context.Context) LXCContainerMountpointArrayOutput {
	return o
}

func (o LXCContainerMountpointArrayOutput) Index(i pulumi.IntInput) LXCContainerMountpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LXCContainerMountpoint {
		return vs[0].([]LXCContainerMountpoint)[vs[1].(int)]
	}).(LXCContainerMountpointOutput)
}

type LXCContainerNetwork struct {
	Bridge   *string `pulumi:"bridge"`
	Firewall *bool   `pulumi:"firewall"`
	Gw       *string `pulumi:"gw"`
	Gw6      *string `pulumi:"gw6"`
	Hwaddr   *string `pulumi:"hwaddr"`
	Ip       *string `pulumi:"ip"`
	Ip6      *string `pulumi:"ip6"`
	Mtu      *string `pulumi:"mtu"`
	Name     string  `pulumi:"name"`
	Rate     *int    `pulumi:"rate"`
	Tag      *int    `pulumi:"tag"`
	Trunks   *string `pulumi:"trunks"`
	Type     *string `pulumi:"type"`
}

// LXCContainerNetworkInput is an input type that accepts LXCContainerNetworkArgs and LXCContainerNetworkOutput values.
// You can construct a concrete instance of `LXCContainerNetworkInput` via:
//
//          LXCContainerNetworkArgs{...}
type LXCContainerNetworkInput interface {
	pulumi.Input

	ToLXCContainerNetworkOutput() LXCContainerNetworkOutput
	ToLXCContainerNetworkOutputWithContext(context.Context) LXCContainerNetworkOutput
}

type LXCContainerNetworkArgs struct {
	Bridge   pulumi.StringPtrInput `pulumi:"bridge"`
	Firewall pulumi.BoolPtrInput   `pulumi:"firewall"`
	Gw       pulumi.StringPtrInput `pulumi:"gw"`
	Gw6      pulumi.StringPtrInput `pulumi:"gw6"`
	Hwaddr   pulumi.StringPtrInput `pulumi:"hwaddr"`
	Ip       pulumi.StringPtrInput `pulumi:"ip"`
	Ip6      pulumi.StringPtrInput `pulumi:"ip6"`
	Mtu      pulumi.StringPtrInput `pulumi:"mtu"`
	Name     pulumi.StringInput    `pulumi:"name"`
	Rate     pulumi.IntPtrInput    `pulumi:"rate"`
	Tag      pulumi.IntPtrInput    `pulumi:"tag"`
	Trunks   pulumi.StringPtrInput `pulumi:"trunks"`
	Type     pulumi.StringPtrInput `pulumi:"type"`
}

func (LXCContainerNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LXCContainerNetwork)(nil)).Elem()
}

func (i LXCContainerNetworkArgs) ToLXCContainerNetworkOutput() LXCContainerNetworkOutput {
	return i.ToLXCContainerNetworkOutputWithContext(context.Background())
}

func (i LXCContainerNetworkArgs) ToLXCContainerNetworkOutputWithContext(ctx context.Context) LXCContainerNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LXCContainerNetworkOutput)
}

// LXCContainerNetworkArrayInput is an input type that accepts LXCContainerNetworkArray and LXCContainerNetworkArrayOutput values.
// You can construct a concrete instance of `LXCContainerNetworkArrayInput` via:
//
//          LXCContainerNetworkArray{ LXCContainerNetworkArgs{...} }
type LXCContainerNetworkArrayInput interface {
	pulumi.Input

	ToLXCContainerNetworkArrayOutput() LXCContainerNetworkArrayOutput
	ToLXCContainerNetworkArrayOutputWithContext(context.Context) LXCContainerNetworkArrayOutput
}

type LXCContainerNetworkArray []LXCContainerNetworkInput

func (LXCContainerNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LXCContainerNetwork)(nil)).Elem()
}

func (i LXCContainerNetworkArray) ToLXCContainerNetworkArrayOutput() LXCContainerNetworkArrayOutput {
	return i.ToLXCContainerNetworkArrayOutputWithContext(context.Background())
}

func (i LXCContainerNetworkArray) ToLXCContainerNetworkArrayOutputWithContext(ctx context.Context) LXCContainerNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LXCContainerNetworkArrayOutput)
}

type LXCContainerNetworkOutput struct{ *pulumi.OutputState }

func (LXCContainerNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LXCContainerNetwork)(nil)).Elem()
}

func (o LXCContainerNetworkOutput) ToLXCContainerNetworkOutput() LXCContainerNetworkOutput {
	return o
}

func (o LXCContainerNetworkOutput) ToLXCContainerNetworkOutputWithContext(ctx context.Context) LXCContainerNetworkOutput {
	return o
}

func (o LXCContainerNetworkOutput) Bridge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LXCContainerNetwork) *string { return v.Bridge }).(pulumi.StringPtrOutput)
}

func (o LXCContainerNetworkOutput) Firewall() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LXCContainerNetwork) *bool { return v.Firewall }).(pulumi.BoolPtrOutput)
}

func (o LXCContainerNetworkOutput) Gw() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LXCContainerNetwork) *string { return v.Gw }).(pulumi.StringPtrOutput)
}

func (o LXCContainerNetworkOutput) Gw6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LXCContainerNetwork) *string { return v.Gw6 }).(pulumi.StringPtrOutput)
}

func (o LXCContainerNetworkOutput) Hwaddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LXCContainerNetwork) *string { return v.Hwaddr }).(pulumi.StringPtrOutput)
}

func (o LXCContainerNetworkOutput) Ip() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LXCContainerNetwork) *string { return v.Ip }).(pulumi.StringPtrOutput)
}

func (o LXCContainerNetworkOutput) Ip6() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LXCContainerNetwork) *string { return v.Ip6 }).(pulumi.StringPtrOutput)
}

func (o LXCContainerNetworkOutput) Mtu() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LXCContainerNetwork) *string { return v.Mtu }).(pulumi.StringPtrOutput)
}

func (o LXCContainerNetworkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LXCContainerNetwork) string { return v.Name }).(pulumi.StringOutput)
}

func (o LXCContainerNetworkOutput) Rate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LXCContainerNetwork) *int { return v.Rate }).(pulumi.IntPtrOutput)
}

func (o LXCContainerNetworkOutput) Tag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LXCContainerNetwork) *int { return v.Tag }).(pulumi.IntPtrOutput)
}

func (o LXCContainerNetworkOutput) Trunks() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LXCContainerNetwork) *string { return v.Trunks }).(pulumi.StringPtrOutput)
}

func (o LXCContainerNetworkOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LXCContainerNetwork) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type LXCContainerNetworkArrayOutput struct{ *pulumi.OutputState }

func (LXCContainerNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LXCContainerNetwork)(nil)).Elem()
}

func (o LXCContainerNetworkArrayOutput) ToLXCContainerNetworkArrayOutput() LXCContainerNetworkArrayOutput {
	return o
}

func (o LXCContainerNetworkArrayOutput) ToLXCContainerNetworkArrayOutputWithContext(ctx context.Context) LXCContainerNetworkArrayOutput {
	return o
}

func (o LXCContainerNetworkArrayOutput) Index(i pulumi.IntInput) LXCContainerNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LXCContainerNetwork {
		return vs[0].([]LXCContainerNetwork)[vs[1].(int)]
	}).(LXCContainerNetworkOutput)
}

type QemuVMDisk struct {
	Backup      *bool   `pulumi:"backup"`
	Cache       *string `pulumi:"cache"`
	Discard     *string `pulumi:"discard"`
	File        *string `pulumi:"file"`
	Format      *string `pulumi:"format"`
	Iothread    *bool   `pulumi:"iothread"`
	Mbps        *int    `pulumi:"mbps"`
	MbpsRd      *int    `pulumi:"mbpsRd"`
	MbpsRdMax   *int    `pulumi:"mbpsRdMax"`
	MbpsWr      *int    `pulumi:"mbpsWr"`
	MbpsWrMax   *int    `pulumi:"mbpsWrMax"`
	Media       *string `pulumi:"media"`
	Replicate   *bool   `pulumi:"replicate"`
	Size        string  `pulumi:"size"`
	Ssd         *bool   `pulumi:"ssd"`
	Storage     string  `pulumi:"storage"`
	StorageType *string `pulumi:"storageType"`
	Type        string  `pulumi:"type"`
}

// QemuVMDiskInput is an input type that accepts QemuVMDiskArgs and QemuVMDiskOutput values.
// You can construct a concrete instance of `QemuVMDiskInput` via:
//
//          QemuVMDiskArgs{...}
type QemuVMDiskInput interface {
	pulumi.Input

	ToQemuVMDiskOutput() QemuVMDiskOutput
	ToQemuVMDiskOutputWithContext(context.Context) QemuVMDiskOutput
}

type QemuVMDiskArgs struct {
	Backup      pulumi.BoolPtrInput   `pulumi:"backup"`
	Cache       pulumi.StringPtrInput `pulumi:"cache"`
	Discard     pulumi.StringPtrInput `pulumi:"discard"`
	File        pulumi.StringPtrInput `pulumi:"file"`
	Format      pulumi.StringPtrInput `pulumi:"format"`
	Iothread    pulumi.BoolPtrInput   `pulumi:"iothread"`
	Mbps        pulumi.IntPtrInput    `pulumi:"mbps"`
	MbpsRd      pulumi.IntPtrInput    `pulumi:"mbpsRd"`
	MbpsRdMax   pulumi.IntPtrInput    `pulumi:"mbpsRdMax"`
	MbpsWr      pulumi.IntPtrInput    `pulumi:"mbpsWr"`
	MbpsWrMax   pulumi.IntPtrInput    `pulumi:"mbpsWrMax"`
	Media       pulumi.StringPtrInput `pulumi:"media"`
	Replicate   pulumi.BoolPtrInput   `pulumi:"replicate"`
	Size        pulumi.StringInput    `pulumi:"size"`
	Ssd         pulumi.BoolPtrInput   `pulumi:"ssd"`
	Storage     pulumi.StringInput    `pulumi:"storage"`
	StorageType pulumi.StringPtrInput `pulumi:"storageType"`
	Type        pulumi.StringInput    `pulumi:"type"`
}

func (QemuVMDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMDisk)(nil)).Elem()
}

func (i QemuVMDiskArgs) ToQemuVMDiskOutput() QemuVMDiskOutput {
	return i.ToQemuVMDiskOutputWithContext(context.Background())
}

func (i QemuVMDiskArgs) ToQemuVMDiskOutputWithContext(ctx context.Context) QemuVMDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMDiskOutput)
}

// QemuVMDiskArrayInput is an input type that accepts QemuVMDiskArray and QemuVMDiskArrayOutput values.
// You can construct a concrete instance of `QemuVMDiskArrayInput` via:
//
//          QemuVMDiskArray{ QemuVMDiskArgs{...} }
type QemuVMDiskArrayInput interface {
	pulumi.Input

	ToQemuVMDiskArrayOutput() QemuVMDiskArrayOutput
	ToQemuVMDiskArrayOutputWithContext(context.Context) QemuVMDiskArrayOutput
}

type QemuVMDiskArray []QemuVMDiskInput

func (QemuVMDiskArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMDisk)(nil)).Elem()
}

func (i QemuVMDiskArray) ToQemuVMDiskArrayOutput() QemuVMDiskArrayOutput {
	return i.ToQemuVMDiskArrayOutputWithContext(context.Background())
}

func (i QemuVMDiskArray) ToQemuVMDiskArrayOutputWithContext(ctx context.Context) QemuVMDiskArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMDiskArrayOutput)
}

type QemuVMDiskOutput struct{ *pulumi.OutputState }

func (QemuVMDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMDisk)(nil)).Elem()
}

func (o QemuVMDiskOutput) ToQemuVMDiskOutput() QemuVMDiskOutput {
	return o
}

func (o QemuVMDiskOutput) ToQemuVMDiskOutputWithContext(ctx context.Context) QemuVMDiskOutput {
	return o
}

func (o QemuVMDiskOutput) Backup() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *bool { return v.Backup }).(pulumi.BoolPtrOutput)
}

func (o QemuVMDiskOutput) Cache() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *string { return v.Cache }).(pulumi.StringPtrOutput)
}

func (o QemuVMDiskOutput) Discard() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *string { return v.Discard }).(pulumi.StringPtrOutput)
}

func (o QemuVMDiskOutput) File() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *string { return v.File }).(pulumi.StringPtrOutput)
}

func (o QemuVMDiskOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *string { return v.Format }).(pulumi.StringPtrOutput)
}

func (o QemuVMDiskOutput) Iothread() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *bool { return v.Iothread }).(pulumi.BoolPtrOutput)
}

func (o QemuVMDiskOutput) Mbps() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.Mbps }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) MbpsRd() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.MbpsRd }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) MbpsRdMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.MbpsRdMax }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) MbpsWr() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.MbpsWr }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) MbpsWrMax() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *int { return v.MbpsWrMax }).(pulumi.IntPtrOutput)
}

func (o QemuVMDiskOutput) Media() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *string { return v.Media }).(pulumi.StringPtrOutput)
}

func (o QemuVMDiskOutput) Replicate() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *bool { return v.Replicate }).(pulumi.BoolPtrOutput)
}

func (o QemuVMDiskOutput) Size() pulumi.StringOutput {
	return o.ApplyT(func(v QemuVMDisk) string { return v.Size }).(pulumi.StringOutput)
}

func (o QemuVMDiskOutput) Ssd() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *bool { return v.Ssd }).(pulumi.BoolPtrOutput)
}

func (o QemuVMDiskOutput) Storage() pulumi.StringOutput {
	return o.ApplyT(func(v QemuVMDisk) string { return v.Storage }).(pulumi.StringOutput)
}

func (o QemuVMDiskOutput) StorageType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMDisk) *string { return v.StorageType }).(pulumi.StringPtrOutput)
}

func (o QemuVMDiskOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QemuVMDisk) string { return v.Type }).(pulumi.StringOutput)
}

type QemuVMDiskArrayOutput struct{ *pulumi.OutputState }

func (QemuVMDiskArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMDisk)(nil)).Elem()
}

func (o QemuVMDiskArrayOutput) ToQemuVMDiskArrayOutput() QemuVMDiskArrayOutput {
	return o
}

func (o QemuVMDiskArrayOutput) ToQemuVMDiskArrayOutputWithContext(ctx context.Context) QemuVMDiskArrayOutput {
	return o
}

func (o QemuVMDiskArrayOutput) Index(i pulumi.IntInput) QemuVMDiskOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QemuVMDisk {
		return vs[0].([]QemuVMDisk)[vs[1].(int)]
	}).(QemuVMDiskOutput)
}

type QemuVMNetwork struct {
	Bridge   *string `pulumi:"bridge"`
	Firewall *bool   `pulumi:"firewall"`
	LinkDown *bool   `pulumi:"linkDown"`
	Macaddr  *string `pulumi:"macaddr"`
	Model    string  `pulumi:"model"`
	Queues   *int    `pulumi:"queues"`
	Rate     *int    `pulumi:"rate"`
	Tag      *int    `pulumi:"tag"`
}

// QemuVMNetworkInput is an input type that accepts QemuVMNetworkArgs and QemuVMNetworkOutput values.
// You can construct a concrete instance of `QemuVMNetworkInput` via:
//
//          QemuVMNetworkArgs{...}
type QemuVMNetworkInput interface {
	pulumi.Input

	ToQemuVMNetworkOutput() QemuVMNetworkOutput
	ToQemuVMNetworkOutputWithContext(context.Context) QemuVMNetworkOutput
}

type QemuVMNetworkArgs struct {
	Bridge   pulumi.StringPtrInput `pulumi:"bridge"`
	Firewall pulumi.BoolPtrInput   `pulumi:"firewall"`
	LinkDown pulumi.BoolPtrInput   `pulumi:"linkDown"`
	Macaddr  pulumi.StringPtrInput `pulumi:"macaddr"`
	Model    pulumi.StringInput    `pulumi:"model"`
	Queues   pulumi.IntPtrInput    `pulumi:"queues"`
	Rate     pulumi.IntPtrInput    `pulumi:"rate"`
	Tag      pulumi.IntPtrInput    `pulumi:"tag"`
}

func (QemuVMNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMNetwork)(nil)).Elem()
}

func (i QemuVMNetworkArgs) ToQemuVMNetworkOutput() QemuVMNetworkOutput {
	return i.ToQemuVMNetworkOutputWithContext(context.Background())
}

func (i QemuVMNetworkArgs) ToQemuVMNetworkOutputWithContext(ctx context.Context) QemuVMNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMNetworkOutput)
}

// QemuVMNetworkArrayInput is an input type that accepts QemuVMNetworkArray and QemuVMNetworkArrayOutput values.
// You can construct a concrete instance of `QemuVMNetworkArrayInput` via:
//
//          QemuVMNetworkArray{ QemuVMNetworkArgs{...} }
type QemuVMNetworkArrayInput interface {
	pulumi.Input

	ToQemuVMNetworkArrayOutput() QemuVMNetworkArrayOutput
	ToQemuVMNetworkArrayOutputWithContext(context.Context) QemuVMNetworkArrayOutput
}

type QemuVMNetworkArray []QemuVMNetworkInput

func (QemuVMNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMNetwork)(nil)).Elem()
}

func (i QemuVMNetworkArray) ToQemuVMNetworkArrayOutput() QemuVMNetworkArrayOutput {
	return i.ToQemuVMNetworkArrayOutputWithContext(context.Background())
}

func (i QemuVMNetworkArray) ToQemuVMNetworkArrayOutputWithContext(ctx context.Context) QemuVMNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMNetworkArrayOutput)
}

type QemuVMNetworkOutput struct{ *pulumi.OutputState }

func (QemuVMNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMNetwork)(nil)).Elem()
}

func (o QemuVMNetworkOutput) ToQemuVMNetworkOutput() QemuVMNetworkOutput {
	return o
}

func (o QemuVMNetworkOutput) ToQemuVMNetworkOutputWithContext(ctx context.Context) QemuVMNetworkOutput {
	return o
}

func (o QemuVMNetworkOutput) Bridge() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMNetwork) *string { return v.Bridge }).(pulumi.StringPtrOutput)
}

func (o QemuVMNetworkOutput) Firewall() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QemuVMNetwork) *bool { return v.Firewall }).(pulumi.BoolPtrOutput)
}

func (o QemuVMNetworkOutput) LinkDown() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v QemuVMNetwork) *bool { return v.LinkDown }).(pulumi.BoolPtrOutput)
}

func (o QemuVMNetworkOutput) Macaddr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMNetwork) *string { return v.Macaddr }).(pulumi.StringPtrOutput)
}

func (o QemuVMNetworkOutput) Model() pulumi.StringOutput {
	return o.ApplyT(func(v QemuVMNetwork) string { return v.Model }).(pulumi.StringOutput)
}

func (o QemuVMNetworkOutput) Queues() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMNetwork) *int { return v.Queues }).(pulumi.IntPtrOutput)
}

func (o QemuVMNetworkOutput) Rate() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMNetwork) *int { return v.Rate }).(pulumi.IntPtrOutput)
}

func (o QemuVMNetworkOutput) Tag() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMNetwork) *int { return v.Tag }).(pulumi.IntPtrOutput)
}

type QemuVMNetworkArrayOutput struct{ *pulumi.OutputState }

func (QemuVMNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMNetwork)(nil)).Elem()
}

func (o QemuVMNetworkArrayOutput) ToQemuVMNetworkArrayOutput() QemuVMNetworkArrayOutput {
	return o
}

func (o QemuVMNetworkArrayOutput) ToQemuVMNetworkArrayOutputWithContext(ctx context.Context) QemuVMNetworkArrayOutput {
	return o
}

func (o QemuVMNetworkArrayOutput) Index(i pulumi.IntInput) QemuVMNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QemuVMNetwork {
		return vs[0].([]QemuVMNetwork)[vs[1].(int)]
	}).(QemuVMNetworkOutput)
}

type QemuVMSerial struct {
	Id   int    `pulumi:"id"`
	Type string `pulumi:"type"`
}

// QemuVMSerialInput is an input type that accepts QemuVMSerialArgs and QemuVMSerialOutput values.
// You can construct a concrete instance of `QemuVMSerialInput` via:
//
//          QemuVMSerialArgs{...}
type QemuVMSerialInput interface {
	pulumi.Input

	ToQemuVMSerialOutput() QemuVMSerialOutput
	ToQemuVMSerialOutputWithContext(context.Context) QemuVMSerialOutput
}

type QemuVMSerialArgs struct {
	Id   pulumi.IntInput    `pulumi:"id"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (QemuVMSerialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMSerial)(nil)).Elem()
}

func (i QemuVMSerialArgs) ToQemuVMSerialOutput() QemuVMSerialOutput {
	return i.ToQemuVMSerialOutputWithContext(context.Background())
}

func (i QemuVMSerialArgs) ToQemuVMSerialOutputWithContext(ctx context.Context) QemuVMSerialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMSerialOutput)
}

// QemuVMSerialArrayInput is an input type that accepts QemuVMSerialArray and QemuVMSerialArrayOutput values.
// You can construct a concrete instance of `QemuVMSerialArrayInput` via:
//
//          QemuVMSerialArray{ QemuVMSerialArgs{...} }
type QemuVMSerialArrayInput interface {
	pulumi.Input

	ToQemuVMSerialArrayOutput() QemuVMSerialArrayOutput
	ToQemuVMSerialArrayOutputWithContext(context.Context) QemuVMSerialArrayOutput
}

type QemuVMSerialArray []QemuVMSerialInput

func (QemuVMSerialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMSerial)(nil)).Elem()
}

func (i QemuVMSerialArray) ToQemuVMSerialArrayOutput() QemuVMSerialArrayOutput {
	return i.ToQemuVMSerialArrayOutputWithContext(context.Background())
}

func (i QemuVMSerialArray) ToQemuVMSerialArrayOutputWithContext(ctx context.Context) QemuVMSerialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMSerialArrayOutput)
}

type QemuVMSerialOutput struct{ *pulumi.OutputState }

func (QemuVMSerialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMSerial)(nil)).Elem()
}

func (o QemuVMSerialOutput) ToQemuVMSerialOutput() QemuVMSerialOutput {
	return o
}

func (o QemuVMSerialOutput) ToQemuVMSerialOutputWithContext(ctx context.Context) QemuVMSerialOutput {
	return o
}

func (o QemuVMSerialOutput) Id() pulumi.IntOutput {
	return o.ApplyT(func(v QemuVMSerial) int { return v.Id }).(pulumi.IntOutput)
}

func (o QemuVMSerialOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v QemuVMSerial) string { return v.Type }).(pulumi.StringOutput)
}

type QemuVMSerialArrayOutput struct{ *pulumi.OutputState }

func (QemuVMSerialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMSerial)(nil)).Elem()
}

func (o QemuVMSerialArrayOutput) ToQemuVMSerialArrayOutput() QemuVMSerialArrayOutput {
	return o
}

func (o QemuVMSerialArrayOutput) ToQemuVMSerialArrayOutputWithContext(ctx context.Context) QemuVMSerialArrayOutput {
	return o
}

func (o QemuVMSerialArrayOutput) Index(i pulumi.IntInput) QemuVMSerialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QemuVMSerial {
		return vs[0].([]QemuVMSerial)[vs[1].(int)]
	}).(QemuVMSerialOutput)
}

type QemuVMVga struct {
	Memory *int    `pulumi:"memory"`
	Type   *string `pulumi:"type"`
}

// QemuVMVgaInput is an input type that accepts QemuVMVgaArgs and QemuVMVgaOutput values.
// You can construct a concrete instance of `QemuVMVgaInput` via:
//
//          QemuVMVgaArgs{...}
type QemuVMVgaInput interface {
	pulumi.Input

	ToQemuVMVgaOutput() QemuVMVgaOutput
	ToQemuVMVgaOutputWithContext(context.Context) QemuVMVgaOutput
}

type QemuVMVgaArgs struct {
	Memory pulumi.IntPtrInput    `pulumi:"memory"`
	Type   pulumi.StringPtrInput `pulumi:"type"`
}

func (QemuVMVgaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMVga)(nil)).Elem()
}

func (i QemuVMVgaArgs) ToQemuVMVgaOutput() QemuVMVgaOutput {
	return i.ToQemuVMVgaOutputWithContext(context.Background())
}

func (i QemuVMVgaArgs) ToQemuVMVgaOutputWithContext(ctx context.Context) QemuVMVgaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMVgaOutput)
}

// QemuVMVgaArrayInput is an input type that accepts QemuVMVgaArray and QemuVMVgaArrayOutput values.
// You can construct a concrete instance of `QemuVMVgaArrayInput` via:
//
//          QemuVMVgaArray{ QemuVMVgaArgs{...} }
type QemuVMVgaArrayInput interface {
	pulumi.Input

	ToQemuVMVgaArrayOutput() QemuVMVgaArrayOutput
	ToQemuVMVgaArrayOutputWithContext(context.Context) QemuVMVgaArrayOutput
}

type QemuVMVgaArray []QemuVMVgaInput

func (QemuVMVgaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMVga)(nil)).Elem()
}

func (i QemuVMVgaArray) ToQemuVMVgaArrayOutput() QemuVMVgaArrayOutput {
	return i.ToQemuVMVgaArrayOutputWithContext(context.Background())
}

func (i QemuVMVgaArray) ToQemuVMVgaArrayOutputWithContext(ctx context.Context) QemuVMVgaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(QemuVMVgaArrayOutput)
}

type QemuVMVgaOutput struct{ *pulumi.OutputState }

func (QemuVMVgaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*QemuVMVga)(nil)).Elem()
}

func (o QemuVMVgaOutput) ToQemuVMVgaOutput() QemuVMVgaOutput {
	return o
}

func (o QemuVMVgaOutput) ToQemuVMVgaOutputWithContext(ctx context.Context) QemuVMVgaOutput {
	return o
}

func (o QemuVMVgaOutput) Memory() pulumi.IntPtrOutput {
	return o.ApplyT(func(v QemuVMVga) *int { return v.Memory }).(pulumi.IntPtrOutput)
}

func (o QemuVMVgaOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v QemuVMVga) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type QemuVMVgaArrayOutput struct{ *pulumi.OutputState }

func (QemuVMVgaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]QemuVMVga)(nil)).Elem()
}

func (o QemuVMVgaArrayOutput) ToQemuVMVgaArrayOutput() QemuVMVgaArrayOutput {
	return o
}

func (o QemuVMVgaArrayOutput) ToQemuVMVgaArrayOutputWithContext(ctx context.Context) QemuVMVgaArrayOutput {
	return o
}

func (o QemuVMVgaArrayOutput) Index(i pulumi.IntInput) QemuVMVgaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) QemuVMVga {
		return vs[0].([]QemuVMVga)[vs[1].(int)]
	}).(QemuVMVgaOutput)
}

func init() {
	pulumi.RegisterOutputType(LXCContainerFeatureOutput{})
	pulumi.RegisterOutputType(LXCContainerFeatureArrayOutput{})
	pulumi.RegisterOutputType(LXCContainerMountpointOutput{})
	pulumi.RegisterOutputType(LXCContainerMountpointArrayOutput{})
	pulumi.RegisterOutputType(LXCContainerNetworkOutput{})
	pulumi.RegisterOutputType(LXCContainerNetworkArrayOutput{})
	pulumi.RegisterOutputType(QemuVMDiskOutput{})
	pulumi.RegisterOutputType(QemuVMDiskArrayOutput{})
	pulumi.RegisterOutputType(QemuVMNetworkOutput{})
	pulumi.RegisterOutputType(QemuVMNetworkArrayOutput{})
	pulumi.RegisterOutputType(QemuVMSerialOutput{})
	pulumi.RegisterOutputType(QemuVMSerialArrayOutput{})
	pulumi.RegisterOutputType(QemuVMVgaOutput{})
	pulumi.RegisterOutputType(QemuVMVgaArrayOutput{})
}
