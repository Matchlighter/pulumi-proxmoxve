# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['LXCDisk']


class LXCDisk(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 acl: Optional[pulumi.Input[bool]] = None,
                 backup: Optional[pulumi.Input[bool]] = None,
                 container: Optional[pulumi.Input[str]] = None,
                 mountoptions: Optional[pulumi.Input[pulumi.InputType['LXCDiskMountoptionsArgs']]] = None,
                 mp: Optional[pulumi.Input[str]] = None,
                 quota: Optional[pulumi.Input[bool]] = None,
                 replicate: Optional[pulumi.Input[bool]] = None,
                 shared: Optional[pulumi.Input[bool]] = None,
                 size: Optional[pulumi.Input[str]] = None,
                 slot: Optional[pulumi.Input[int]] = None,
                 storage: Optional[pulumi.Input[str]] = None,
                 volume: Optional[pulumi.Input[str]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a LXCDisk resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['acl'] = acl
            __props__['backup'] = backup
            if container is None:
                raise TypeError("Missing required property 'container'")
            __props__['container'] = container
            __props__['mountoptions'] = mountoptions
            if mp is None:
                raise TypeError("Missing required property 'mp'")
            __props__['mp'] = mp
            __props__['quota'] = quota
            __props__['replicate'] = replicate
            __props__['shared'] = shared
            if size is None:
                raise TypeError("Missing required property 'size'")
            __props__['size'] = size
            if slot is None:
                raise TypeError("Missing required property 'slot'")
            __props__['slot'] = slot
            if storage is None:
                raise TypeError("Missing required property 'storage'")
            __props__['storage'] = storage
            __props__['volume'] = volume
        super(LXCDisk, __self__).__init__(
            'proxmoxve:index/lXCDisk:LXCDisk',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            acl: Optional[pulumi.Input[bool]] = None,
            backup: Optional[pulumi.Input[bool]] = None,
            container: Optional[pulumi.Input[str]] = None,
            mountoptions: Optional[pulumi.Input[pulumi.InputType['LXCDiskMountoptionsArgs']]] = None,
            mp: Optional[pulumi.Input[str]] = None,
            quota: Optional[pulumi.Input[bool]] = None,
            replicate: Optional[pulumi.Input[bool]] = None,
            shared: Optional[pulumi.Input[bool]] = None,
            size: Optional[pulumi.Input[str]] = None,
            slot: Optional[pulumi.Input[int]] = None,
            storage: Optional[pulumi.Input[str]] = None,
            volume: Optional[pulumi.Input[str]] = None) -> 'LXCDisk':
        """
        Get an existing LXCDisk resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["acl"] = acl
        __props__["backup"] = backup
        __props__["container"] = container
        __props__["mountoptions"] = mountoptions
        __props__["mp"] = mp
        __props__["quota"] = quota
        __props__["replicate"] = replicate
        __props__["shared"] = shared
        __props__["size"] = size
        __props__["slot"] = slot
        __props__["storage"] = storage
        __props__["volume"] = volume
        return LXCDisk(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def acl(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "acl")

    @property
    @pulumi.getter
    def backup(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "backup")

    @property
    @pulumi.getter
    def container(self) -> pulumi.Output[str]:
        return pulumi.get(self, "container")

    @property
    @pulumi.getter
    def mountoptions(self) -> pulumi.Output[Optional['outputs.LXCDiskMountoptions']]:
        return pulumi.get(self, "mountoptions")

    @property
    @pulumi.getter
    def mp(self) -> pulumi.Output[str]:
        return pulumi.get(self, "mp")

    @property
    @pulumi.getter
    def quota(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "quota")

    @property
    @pulumi.getter
    def replicate(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "replicate")

    @property
    @pulumi.getter
    def shared(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "shared")

    @property
    @pulumi.getter
    def size(self) -> pulumi.Output[str]:
        return pulumi.get(self, "size")

    @property
    @pulumi.getter
    def slot(self) -> pulumi.Output[int]:
        return pulumi.get(self, "slot")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[str]:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter
    def volume(self) -> pulumi.Output[str]:
        return pulumi.get(self, "volume")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

