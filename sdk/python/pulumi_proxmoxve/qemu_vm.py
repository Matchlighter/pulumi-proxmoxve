# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['QemuVM']


class QemuVM(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 additional_wait: Optional[pulumi.Input[int]] = None,
                 agent: Optional[pulumi.Input[int]] = None,
                 args: Optional[pulumi.Input[str]] = None,
                 balloon: Optional[pulumi.Input[int]] = None,
                 bios: Optional[pulumi.Input[str]] = None,
                 boot: Optional[pulumi.Input[str]] = None,
                 bootdisk: Optional[pulumi.Input[str]] = None,
                 bridge: Optional[pulumi.Input[str]] = None,
                 ci_wait: Optional[pulumi.Input[int]] = None,
                 cicustom: Optional[pulumi.Input[str]] = None,
                 cipassword: Optional[pulumi.Input[str]] = None,
                 ciuser: Optional[pulumi.Input[str]] = None,
                 clone: Optional[pulumi.Input[str]] = None,
                 clone_wait: Optional[pulumi.Input[int]] = None,
                 cloudinit_cdrom_storage: Optional[pulumi.Input[str]] = None,
                 cores: Optional[pulumi.Input[int]] = None,
                 cpu: Optional[pulumi.Input[str]] = None,
                 define_connection_info: Optional[pulumi.Input[bool]] = None,
                 desc: Optional[pulumi.Input[str]] = None,
                 disk_gb: Optional[pulumi.Input[float]] = None,
                 disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QemuVMDiskArgs']]]]] = None,
                 force_create: Optional[pulumi.Input[bool]] = None,
                 force_recreate_on_change_of: Optional[pulumi.Input[str]] = None,
                 full_clone: Optional[pulumi.Input[bool]] = None,
                 guest_agent_ready_timeout: Optional[pulumi.Input[int]] = None,
                 hastate: Optional[pulumi.Input[str]] = None,
                 hotplug: Optional[pulumi.Input[str]] = None,
                 ipconfig0: Optional[pulumi.Input[str]] = None,
                 ipconfig1: Optional[pulumi.Input[str]] = None,
                 ipconfig2: Optional[pulumi.Input[str]] = None,
                 iso: Optional[pulumi.Input[str]] = None,
                 kvm: Optional[pulumi.Input[bool]] = None,
                 mac: Optional[pulumi.Input[str]] = None,
                 memory: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 nameserver: Optional[pulumi.Input[str]] = None,
                 networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QemuVMNetworkArgs']]]]] = None,
                 nic: Optional[pulumi.Input[str]] = None,
                 numa: Optional[pulumi.Input[bool]] = None,
                 onboot: Optional[pulumi.Input[bool]] = None,
                 os_network_config: Optional[pulumi.Input[str]] = None,
                 os_type: Optional[pulumi.Input[str]] = None,
                 pool: Optional[pulumi.Input[str]] = None,
                 preprovision: Optional[pulumi.Input[bool]] = None,
                 qemu_os: Optional[pulumi.Input[str]] = None,
                 scsihw: Optional[pulumi.Input[str]] = None,
                 searchdomain: Optional[pulumi.Input[str]] = None,
                 serials: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QemuVMSerialArgs']]]]] = None,
                 sockets: Optional[pulumi.Input[int]] = None,
                 ssh_forward_ip: Optional[pulumi.Input[str]] = None,
                 ssh_private_key: Optional[pulumi.Input[str]] = None,
                 ssh_user: Optional[pulumi.Input[str]] = None,
                 sshkeys: Optional[pulumi.Input[str]] = None,
                 storage: Optional[pulumi.Input[str]] = None,
                 storage_type: Optional[pulumi.Input[str]] = None,
                 tags: Optional[pulumi.Input[str]] = None,
                 target_node: Optional[pulumi.Input[str]] = None,
                 vcpus: Optional[pulumi.Input[int]] = None,
                 vgas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QemuVMVgaArgs']]]]] = None,
                 vlan: Optional[pulumi.Input[int]] = None,
                 vmid: Optional[pulumi.Input[int]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        Create a QemuVM resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['additional_wait'] = additional_wait
            __props__['agent'] = agent
            __props__['args'] = args
            __props__['balloon'] = balloon
            __props__['bios'] = bios
            __props__['boot'] = boot
            __props__['bootdisk'] = bootdisk
            if bridge is not None:
                warnings.warn("Use `network.bridge` instead", DeprecationWarning)
                pulumi.log.warn("bridge is deprecated: Use `network.bridge` instead")
            __props__['bridge'] = bridge
            __props__['ci_wait'] = ci_wait
            __props__['cicustom'] = cicustom
            __props__['cipassword'] = cipassword
            __props__['ciuser'] = ciuser
            __props__['clone'] = clone
            __props__['clone_wait'] = clone_wait
            __props__['cloudinit_cdrom_storage'] = cloudinit_cdrom_storage
            __props__['cores'] = cores
            __props__['cpu'] = cpu
            __props__['define_connection_info'] = define_connection_info
            __props__['desc'] = desc
            if disk_gb is not None:
                warnings.warn("Use `disk.size` instead", DeprecationWarning)
                pulumi.log.warn("disk_gb is deprecated: Use `disk.size` instead")
            __props__['disk_gb'] = disk_gb
            __props__['disks'] = disks
            __props__['force_create'] = force_create
            __props__['force_recreate_on_change_of'] = force_recreate_on_change_of
            __props__['full_clone'] = full_clone
            __props__['guest_agent_ready_timeout'] = guest_agent_ready_timeout
            __props__['hastate'] = hastate
            __props__['hotplug'] = hotplug
            __props__['ipconfig0'] = ipconfig0
            __props__['ipconfig1'] = ipconfig1
            __props__['ipconfig2'] = ipconfig2
            __props__['iso'] = iso
            __props__['kvm'] = kvm
            if mac is not None:
                warnings.warn("Use `network.macaddr` to access the auto generated MAC address", DeprecationWarning)
                pulumi.log.warn("mac is deprecated: Use `network.macaddr` to access the auto generated MAC address")
            __props__['mac'] = mac
            __props__['memory'] = memory
            __props__['name'] = name
            __props__['nameserver'] = nameserver
            __props__['networks'] = networks
            if nic is not None:
                warnings.warn("Use `network` instead", DeprecationWarning)
                pulumi.log.warn("nic is deprecated: Use `network` instead")
            __props__['nic'] = nic
            __props__['numa'] = numa
            __props__['onboot'] = onboot
            __props__['os_network_config'] = os_network_config
            __props__['os_type'] = os_type
            __props__['pool'] = pool
            __props__['preprovision'] = preprovision
            __props__['qemu_os'] = qemu_os
            __props__['scsihw'] = scsihw
            __props__['searchdomain'] = searchdomain
            __props__['serials'] = serials
            __props__['sockets'] = sockets
            __props__['ssh_forward_ip'] = ssh_forward_ip
            __props__['ssh_private_key'] = ssh_private_key
            __props__['ssh_user'] = ssh_user
            __props__['sshkeys'] = sshkeys
            if storage is not None:
                warnings.warn("Use `disk.storage` instead", DeprecationWarning)
                pulumi.log.warn("storage is deprecated: Use `disk.storage` instead")
            __props__['storage'] = storage
            if storage_type is not None:
                warnings.warn("Use `disk.type` instead", DeprecationWarning)
                pulumi.log.warn("storage_type is deprecated: Use `disk.type` instead")
            __props__['storage_type'] = storage_type
            __props__['tags'] = tags
            if target_node is None:
                raise TypeError("Missing required property 'target_node'")
            __props__['target_node'] = target_node
            __props__['vcpus'] = vcpus
            __props__['vgas'] = vgas
            if vlan is not None:
                warnings.warn("Use `network.tag` instead", DeprecationWarning)
                pulumi.log.warn("vlan is deprecated: Use `network.tag` instead")
            __props__['vlan'] = vlan
            __props__['vmid'] = vmid
            __props__['default_ipv4_address'] = None
            __props__['reboot_required'] = None
            __props__['ssh_host'] = None
            __props__['ssh_port'] = None
            __props__['unused_disks'] = None
        super(QemuVM, __self__).__init__(
            'proxmoxve:index/qemuVM:QemuVM',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            additional_wait: Optional[pulumi.Input[int]] = None,
            agent: Optional[pulumi.Input[int]] = None,
            args: Optional[pulumi.Input[str]] = None,
            balloon: Optional[pulumi.Input[int]] = None,
            bios: Optional[pulumi.Input[str]] = None,
            boot: Optional[pulumi.Input[str]] = None,
            bootdisk: Optional[pulumi.Input[str]] = None,
            bridge: Optional[pulumi.Input[str]] = None,
            ci_wait: Optional[pulumi.Input[int]] = None,
            cicustom: Optional[pulumi.Input[str]] = None,
            cipassword: Optional[pulumi.Input[str]] = None,
            ciuser: Optional[pulumi.Input[str]] = None,
            clone: Optional[pulumi.Input[str]] = None,
            clone_wait: Optional[pulumi.Input[int]] = None,
            cloudinit_cdrom_storage: Optional[pulumi.Input[str]] = None,
            cores: Optional[pulumi.Input[int]] = None,
            cpu: Optional[pulumi.Input[str]] = None,
            default_ipv4_address: Optional[pulumi.Input[str]] = None,
            define_connection_info: Optional[pulumi.Input[bool]] = None,
            desc: Optional[pulumi.Input[str]] = None,
            disk_gb: Optional[pulumi.Input[float]] = None,
            disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QemuVMDiskArgs']]]]] = None,
            force_create: Optional[pulumi.Input[bool]] = None,
            force_recreate_on_change_of: Optional[pulumi.Input[str]] = None,
            full_clone: Optional[pulumi.Input[bool]] = None,
            guest_agent_ready_timeout: Optional[pulumi.Input[int]] = None,
            hastate: Optional[pulumi.Input[str]] = None,
            hotplug: Optional[pulumi.Input[str]] = None,
            ipconfig0: Optional[pulumi.Input[str]] = None,
            ipconfig1: Optional[pulumi.Input[str]] = None,
            ipconfig2: Optional[pulumi.Input[str]] = None,
            iso: Optional[pulumi.Input[str]] = None,
            kvm: Optional[pulumi.Input[bool]] = None,
            mac: Optional[pulumi.Input[str]] = None,
            memory: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            nameserver: Optional[pulumi.Input[str]] = None,
            networks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QemuVMNetworkArgs']]]]] = None,
            nic: Optional[pulumi.Input[str]] = None,
            numa: Optional[pulumi.Input[bool]] = None,
            onboot: Optional[pulumi.Input[bool]] = None,
            os_network_config: Optional[pulumi.Input[str]] = None,
            os_type: Optional[pulumi.Input[str]] = None,
            pool: Optional[pulumi.Input[str]] = None,
            preprovision: Optional[pulumi.Input[bool]] = None,
            qemu_os: Optional[pulumi.Input[str]] = None,
            reboot_required: Optional[pulumi.Input[bool]] = None,
            scsihw: Optional[pulumi.Input[str]] = None,
            searchdomain: Optional[pulumi.Input[str]] = None,
            serials: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QemuVMSerialArgs']]]]] = None,
            sockets: Optional[pulumi.Input[int]] = None,
            ssh_forward_ip: Optional[pulumi.Input[str]] = None,
            ssh_host: Optional[pulumi.Input[str]] = None,
            ssh_port: Optional[pulumi.Input[str]] = None,
            ssh_private_key: Optional[pulumi.Input[str]] = None,
            ssh_user: Optional[pulumi.Input[str]] = None,
            sshkeys: Optional[pulumi.Input[str]] = None,
            storage: Optional[pulumi.Input[str]] = None,
            storage_type: Optional[pulumi.Input[str]] = None,
            tags: Optional[pulumi.Input[str]] = None,
            target_node: Optional[pulumi.Input[str]] = None,
            unused_disks: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QemuVMUnusedDiskArgs']]]]] = None,
            vcpus: Optional[pulumi.Input[int]] = None,
            vgas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QemuVMVgaArgs']]]]] = None,
            vlan: Optional[pulumi.Input[int]] = None,
            vmid: Optional[pulumi.Input[int]] = None) -> 'QemuVM':
        """
        Get an existing QemuVM resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] reboot_required: Internal variable, true if any of the modified parameters require a reboot to take effect.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['QemuVMUnusedDiskArgs']]]] unused_disks: Record unused disks in proxmox. This is intended to be read-only for now.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["additional_wait"] = additional_wait
        __props__["agent"] = agent
        __props__["args"] = args
        __props__["balloon"] = balloon
        __props__["bios"] = bios
        __props__["boot"] = boot
        __props__["bootdisk"] = bootdisk
        __props__["bridge"] = bridge
        __props__["ci_wait"] = ci_wait
        __props__["cicustom"] = cicustom
        __props__["cipassword"] = cipassword
        __props__["ciuser"] = ciuser
        __props__["clone"] = clone
        __props__["clone_wait"] = clone_wait
        __props__["cloudinit_cdrom_storage"] = cloudinit_cdrom_storage
        __props__["cores"] = cores
        __props__["cpu"] = cpu
        __props__["default_ipv4_address"] = default_ipv4_address
        __props__["define_connection_info"] = define_connection_info
        __props__["desc"] = desc
        __props__["disk_gb"] = disk_gb
        __props__["disks"] = disks
        __props__["force_create"] = force_create
        __props__["force_recreate_on_change_of"] = force_recreate_on_change_of
        __props__["full_clone"] = full_clone
        __props__["guest_agent_ready_timeout"] = guest_agent_ready_timeout
        __props__["hastate"] = hastate
        __props__["hotplug"] = hotplug
        __props__["ipconfig0"] = ipconfig0
        __props__["ipconfig1"] = ipconfig1
        __props__["ipconfig2"] = ipconfig2
        __props__["iso"] = iso
        __props__["kvm"] = kvm
        __props__["mac"] = mac
        __props__["memory"] = memory
        __props__["name"] = name
        __props__["nameserver"] = nameserver
        __props__["networks"] = networks
        __props__["nic"] = nic
        __props__["numa"] = numa
        __props__["onboot"] = onboot
        __props__["os_network_config"] = os_network_config
        __props__["os_type"] = os_type
        __props__["pool"] = pool
        __props__["preprovision"] = preprovision
        __props__["qemu_os"] = qemu_os
        __props__["reboot_required"] = reboot_required
        __props__["scsihw"] = scsihw
        __props__["searchdomain"] = searchdomain
        __props__["serials"] = serials
        __props__["sockets"] = sockets
        __props__["ssh_forward_ip"] = ssh_forward_ip
        __props__["ssh_host"] = ssh_host
        __props__["ssh_port"] = ssh_port
        __props__["ssh_private_key"] = ssh_private_key
        __props__["ssh_user"] = ssh_user
        __props__["sshkeys"] = sshkeys
        __props__["storage"] = storage
        __props__["storage_type"] = storage_type
        __props__["tags"] = tags
        __props__["target_node"] = target_node
        __props__["unused_disks"] = unused_disks
        __props__["vcpus"] = vcpus
        __props__["vgas"] = vgas
        __props__["vlan"] = vlan
        __props__["vmid"] = vmid
        return QemuVM(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="additionalWait")
    def additional_wait(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "additional_wait")

    @property
    @pulumi.getter
    def agent(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "agent")

    @property
    @pulumi.getter
    def args(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "args")

    @property
    @pulumi.getter
    def balloon(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "balloon")

    @property
    @pulumi.getter
    def bios(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "bios")

    @property
    @pulumi.getter
    def boot(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "boot")

    @property
    @pulumi.getter
    def bootdisk(self) -> pulumi.Output[str]:
        return pulumi.get(self, "bootdisk")

    @property
    @pulumi.getter
    def bridge(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "bridge")

    @property
    @pulumi.getter(name="ciWait")
    def ci_wait(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "ci_wait")

    @property
    @pulumi.getter
    def cicustom(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cicustom")

    @property
    @pulumi.getter
    def cipassword(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cipassword")

    @property
    @pulumi.getter
    def ciuser(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ciuser")

    @property
    @pulumi.getter
    def clone(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "clone")

    @property
    @pulumi.getter(name="cloneWait")
    def clone_wait(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "clone_wait")

    @property
    @pulumi.getter(name="cloudinitCdromStorage")
    def cloudinit_cdrom_storage(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cloudinit_cdrom_storage")

    @property
    @pulumi.getter
    def cores(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "cores")

    @property
    @pulumi.getter
    def cpu(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "cpu")

    @property
    @pulumi.getter(name="defaultIpv4Address")
    def default_ipv4_address(self) -> pulumi.Output[str]:
        return pulumi.get(self, "default_ipv4_address")

    @property
    @pulumi.getter(name="defineConnectionInfo")
    def define_connection_info(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "define_connection_info")

    @property
    @pulumi.getter
    def desc(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "desc")

    @property
    @pulumi.getter(name="diskGb")
    def disk_gb(self) -> pulumi.Output[Optional[float]]:
        return pulumi.get(self, "disk_gb")

    @property
    @pulumi.getter
    def disks(self) -> pulumi.Output[Optional[Sequence['outputs.QemuVMDisk']]]:
        return pulumi.get(self, "disks")

    @property
    @pulumi.getter(name="forceCreate")
    def force_create(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "force_create")

    @property
    @pulumi.getter(name="forceRecreateOnChangeOf")
    def force_recreate_on_change_of(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "force_recreate_on_change_of")

    @property
    @pulumi.getter(name="fullClone")
    def full_clone(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "full_clone")

    @property
    @pulumi.getter(name="guestAgentReadyTimeout")
    def guest_agent_ready_timeout(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "guest_agent_ready_timeout")

    @property
    @pulumi.getter
    def hastate(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "hastate")

    @property
    @pulumi.getter
    def hotplug(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "hotplug")

    @property
    @pulumi.getter
    def ipconfig0(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ipconfig0")

    @property
    @pulumi.getter
    def ipconfig1(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ipconfig1")

    @property
    @pulumi.getter
    def ipconfig2(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ipconfig2")

    @property
    @pulumi.getter
    def iso(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "iso")

    @property
    @pulumi.getter
    def kvm(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "kvm")

    @property
    @pulumi.getter
    def mac(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "mac")

    @property
    @pulumi.getter
    def memory(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "memory")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def nameserver(self) -> pulumi.Output[str]:
        return pulumi.get(self, "nameserver")

    @property
    @pulumi.getter
    def networks(self) -> pulumi.Output[Optional[Sequence['outputs.QemuVMNetwork']]]:
        return pulumi.get(self, "networks")

    @property
    @pulumi.getter
    def nic(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "nic")

    @property
    @pulumi.getter
    def numa(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "numa")

    @property
    @pulumi.getter
    def onboot(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "onboot")

    @property
    @pulumi.getter(name="osNetworkConfig")
    def os_network_config(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "os_network_config")

    @property
    @pulumi.getter(name="osType")
    def os_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "os_type")

    @property
    @pulumi.getter
    def pool(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "pool")

    @property
    @pulumi.getter
    def preprovision(self) -> pulumi.Output[Optional[bool]]:
        return pulumi.get(self, "preprovision")

    @property
    @pulumi.getter(name="qemuOs")
    def qemu_os(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "qemu_os")

    @property
    @pulumi.getter(name="rebootRequired")
    def reboot_required(self) -> pulumi.Output[bool]:
        """
        Internal variable, true if any of the modified parameters require a reboot to take effect.
        """
        return pulumi.get(self, "reboot_required")

    @property
    @pulumi.getter
    def scsihw(self) -> pulumi.Output[str]:
        return pulumi.get(self, "scsihw")

    @property
    @pulumi.getter
    def searchdomain(self) -> pulumi.Output[str]:
        return pulumi.get(self, "searchdomain")

    @property
    @pulumi.getter
    def serials(self) -> pulumi.Output[Optional[Sequence['outputs.QemuVMSerial']]]:
        return pulumi.get(self, "serials")

    @property
    @pulumi.getter
    def sockets(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "sockets")

    @property
    @pulumi.getter(name="sshForwardIp")
    def ssh_forward_ip(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ssh_forward_ip")

    @property
    @pulumi.getter(name="sshHost")
    def ssh_host(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssh_host")

    @property
    @pulumi.getter(name="sshPort")
    def ssh_port(self) -> pulumi.Output[str]:
        return pulumi.get(self, "ssh_port")

    @property
    @pulumi.getter(name="sshPrivateKey")
    def ssh_private_key(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ssh_private_key")

    @property
    @pulumi.getter(name="sshUser")
    def ssh_user(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "ssh_user")

    @property
    @pulumi.getter
    def sshkeys(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "sshkeys")

    @property
    @pulumi.getter
    def storage(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "storage")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter
    def tags(self) -> pulumi.Output[Optional[str]]:
        return pulumi.get(self, "tags")

    @property
    @pulumi.getter(name="targetNode")
    def target_node(self) -> pulumi.Output[str]:
        return pulumi.get(self, "target_node")

    @property
    @pulumi.getter(name="unusedDisks")
    def unused_disks(self) -> pulumi.Output[Sequence['outputs.QemuVMUnusedDisk']]:
        """
        Record unused disks in proxmox. This is intended to be read-only for now.
        """
        return pulumi.get(self, "unused_disks")

    @property
    @pulumi.getter
    def vcpus(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "vcpus")

    @property
    @pulumi.getter
    def vgas(self) -> pulumi.Output[Optional[Sequence['outputs.QemuVMVga']]]:
        return pulumi.get(self, "vgas")

    @property
    @pulumi.getter
    def vlan(self) -> pulumi.Output[Optional[int]]:
        return pulumi.get(self, "vlan")

    @property
    @pulumi.getter
    def vmid(self) -> pulumi.Output[int]:
        return pulumi.get(self, "vmid")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

