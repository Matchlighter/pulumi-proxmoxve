// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Proxmoxve
{
    public static class Config
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly Pulumi.Config __config = new Pulumi.Config("proxmoxve");

        private static readonly __Value<string?> _pmApiTokenId = new __Value<string?>(() => __config.Get("pmApiTokenId"));
        /// <summary>
        /// API TokenID e.g. root@pam!mytesttoken
        /// </summary>
        public static string? PmApiTokenId
        {
            get => _pmApiTokenId.Get();
            set => _pmApiTokenId.Set(value);
        }

        private static readonly __Value<string?> _pmApiTokenSecret = new __Value<string?>(() => __config.Get("pmApiTokenSecret"));
        /// <summary>
        /// The secret uuid corresponding to a TokenID
        /// </summary>
        public static string? PmApiTokenSecret
        {
            get => _pmApiTokenSecret.Get();
            set => _pmApiTokenSecret.Set(value);
        }

        private static readonly __Value<string?> _pmApiUrl = new __Value<string?>(() => __config.Get("pmApiUrl"));
        /// <summary>
        /// https://host.fqdn:8006/api2/json
        /// </summary>
        public static string? PmApiUrl
        {
            get => _pmApiUrl.Get();
            set => _pmApiUrl.Set(value);
        }

        private static readonly __Value<bool?> _pmDangerouslyIgnoreUnknownAttributes = new __Value<bool?>(() => __config.GetBoolean("pmDangerouslyIgnoreUnknownAttributes"));
        /// <summary>
        /// By default this provider will exit if an unknown attribute is found. This is to prevent the accidential destruction of
        /// VMs or Data when something in the proxmox API has changed/updated and is not confirmed to work with this provider. Set
        /// this to true at your own risk. It may allow you to proceed in cases when the provider refuses to work, but be aware of
        /// the danger in doing so.
        /// </summary>
        public static bool? PmDangerouslyIgnoreUnknownAttributes
        {
            get => _pmDangerouslyIgnoreUnknownAttributes.Get();
            set => _pmDangerouslyIgnoreUnknownAttributes.Set(value);
        }

        private static readonly __Value<bool?> _pmLogEnable = new __Value<bool?>(() => __config.GetBoolean("pmLogEnable"));
        /// <summary>
        /// Enable provider logging to get proxmox API logs
        /// </summary>
        public static bool? PmLogEnable
        {
            get => _pmLogEnable.Get();
            set => _pmLogEnable.Set(value);
        }

        private static readonly __Value<string?> _pmLogFile = new __Value<string?>(() => __config.Get("pmLogFile"));
        /// <summary>
        /// Write logs to this specific file
        /// </summary>
        public static string? PmLogFile
        {
            get => _pmLogFile.Get();
            set => _pmLogFile.Set(value);
        }

        private static readonly __Value<ImmutableDictionary<string, object>?> _pmLogLevels = new __Value<ImmutableDictionary<string, object>?>(() => __config.GetObject<ImmutableDictionary<string, object>>("pmLogLevels"));
        /// <summary>
        /// Configure the logging level to display; trace, debug, info, warn, etc
        /// </summary>
        public static ImmutableDictionary<string, object>? PmLogLevels
        {
            get => _pmLogLevels.Get();
            set => _pmLogLevels.Set(value);
        }

        private static readonly __Value<string?> _pmOtp = new __Value<string?>(() => __config.Get("pmOtp"));
        /// <summary>
        /// OTP 2FA code (if required)
        /// </summary>
        public static string? PmOtp
        {
            get => _pmOtp.Get();
            set => _pmOtp.Set(value);
        }

        private static readonly __Value<int?> _pmParallel = new __Value<int?>(() => __config.GetInt32("pmParallel"));
        public static int? PmParallel
        {
            get => _pmParallel.Get();
            set => _pmParallel.Set(value);
        }

        private static readonly __Value<string?> _pmPassword = new __Value<string?>(() => __config.Get("pmPassword"));
        /// <summary>
        /// Password to authenticate into proxmox
        /// </summary>
        public static string? PmPassword
        {
            get => _pmPassword.Get();
            set => _pmPassword.Set(value);
        }

        private static readonly __Value<int?> _pmTimeout = new __Value<int?>(() => __config.GetInt32("pmTimeout"));
        public static int? PmTimeout
        {
            get => _pmTimeout.Get();
            set => _pmTimeout.Set(value);
        }

        private static readonly __Value<bool?> _pmTlsInsecure = new __Value<bool?>(() => __config.GetBoolean("pmTlsInsecure"));
        /// <summary>
        /// By default, every TLS connection is verified to be secure. This option allows terraform to proceed and operate on
        /// servers considered insecure. For example if you're connecting to a remote host and you do not have the CA cert that
        /// issued the proxmox api url's certificate.
        /// </summary>
        public static bool? PmTlsInsecure
        {
            get => _pmTlsInsecure.Get();
            set => _pmTlsInsecure.Set(value);
        }

        private static readonly __Value<string?> _pmUser = new __Value<string?>(() => __config.Get("pmUser"));
        /// <summary>
        /// Username e.g. myuser or myuser@pam
        /// </summary>
        public static string? PmUser
        {
            get => _pmUser.Get();
            set => _pmUser.Set(value);
        }

    }
}
