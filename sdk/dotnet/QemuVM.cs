// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Proxmoxve
{
    public partial class QemuVM : Pulumi.CustomResource
    {
        [Output("agent")]
        public Output<int?> Agent { get; private set; } = null!;

        [Output("balloon")]
        public Output<int?> Balloon { get; private set; } = null!;

        [Output("bios")]
        public Output<string?> Bios { get; private set; } = null!;

        [Output("boot")]
        public Output<string?> Boot { get; private set; } = null!;

        [Output("bootdisk")]
        public Output<string> Bootdisk { get; private set; } = null!;

        [Output("bridge")]
        public Output<string?> Bridge { get; private set; } = null!;

        [Output("ciWait")]
        public Output<int?> CiWait { get; private set; } = null!;

        [Output("cicustom")]
        public Output<string?> Cicustom { get; private set; } = null!;

        [Output("cipassword")]
        public Output<string?> Cipassword { get; private set; } = null!;

        [Output("ciuser")]
        public Output<string?> Ciuser { get; private set; } = null!;

        [Output("clone")]
        public Output<string?> Clone { get; private set; } = null!;

        [Output("cloneWait")]
        public Output<int?> CloneWait { get; private set; } = null!;

        [Output("cores")]
        public Output<int?> Cores { get; private set; } = null!;

        [Output("cpu")]
        public Output<string?> Cpu { get; private set; } = null!;

        [Output("defineConnectionInfo")]
        public Output<bool?> DefineConnectionInfo { get; private set; } = null!;

        [Output("desc")]
        public Output<string?> Desc { get; private set; } = null!;

        [Output("diskGb")]
        public Output<double?> DiskGb { get; private set; } = null!;

        [Output("disks")]
        public Output<ImmutableArray<Outputs.QemuVMDisk>> Disks { get; private set; } = null!;

        [Output("forceCreate")]
        public Output<bool?> ForceCreate { get; private set; } = null!;

        [Output("forceRecreateOnChangeOf")]
        public Output<string?> ForceRecreateOnChangeOf { get; private set; } = null!;

        [Output("fullClone")]
        public Output<bool?> FullClone { get; private set; } = null!;

        [Output("hastate")]
        public Output<string?> Hastate { get; private set; } = null!;

        [Output("hotplug")]
        public Output<string?> Hotplug { get; private set; } = null!;

        [Output("ipconfig0")]
        public Output<string?> Ipconfig0 { get; private set; } = null!;

        [Output("ipconfig1")]
        public Output<string?> Ipconfig1 { get; private set; } = null!;

        [Output("ipconfig2")]
        public Output<string?> Ipconfig2 { get; private set; } = null!;

        [Output("iso")]
        public Output<string?> Iso { get; private set; } = null!;

        [Output("kvm")]
        public Output<bool?> Kvm { get; private set; } = null!;

        [Output("mac")]
        public Output<string?> Mac { get; private set; } = null!;

        [Output("memory")]
        public Output<int?> Memory { get; private set; } = null!;

        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("nameserver")]
        public Output<string> Nameserver { get; private set; } = null!;

        [Output("networks")]
        public Output<ImmutableArray<Outputs.QemuVMNetwork>> Networks { get; private set; } = null!;

        [Output("nic")]
        public Output<string?> Nic { get; private set; } = null!;

        [Output("numa")]
        public Output<bool?> Numa { get; private set; } = null!;

        [Output("onboot")]
        public Output<bool?> Onboot { get; private set; } = null!;

        [Output("osNetworkConfig")]
        public Output<string?> OsNetworkConfig { get; private set; } = null!;

        [Output("osType")]
        public Output<string?> OsType { get; private set; } = null!;

        [Output("pool")]
        public Output<string?> Pool { get; private set; } = null!;

        [Output("preprovision")]
        public Output<bool?> Preprovision { get; private set; } = null!;

        [Output("qemuOs")]
        public Output<string?> QemuOs { get; private set; } = null!;

        [Output("scsihw")]
        public Output<string> Scsihw { get; private set; } = null!;

        [Output("searchdomain")]
        public Output<string> Searchdomain { get; private set; } = null!;

        [Output("serials")]
        public Output<ImmutableArray<Outputs.QemuVMSerial>> Serials { get; private set; } = null!;

        [Output("sockets")]
        public Output<int?> Sockets { get; private set; } = null!;

        [Output("sshForwardIp")]
        public Output<string?> SshForwardIp { get; private set; } = null!;

        [Output("sshHost")]
        public Output<string> SshHost { get; private set; } = null!;

        [Output("sshPort")]
        public Output<string> SshPort { get; private set; } = null!;

        [Output("sshPrivateKey")]
        public Output<string?> SshPrivateKey { get; private set; } = null!;

        [Output("sshUser")]
        public Output<string?> SshUser { get; private set; } = null!;

        [Output("sshkeys")]
        public Output<string?> Sshkeys { get; private set; } = null!;

        [Output("storage")]
        public Output<string?> Storage { get; private set; } = null!;

        [Output("storageType")]
        public Output<string?> StorageType { get; private set; } = null!;

        [Output("targetNode")]
        public Output<string> TargetNode { get; private set; } = null!;

        /// <summary>
        /// Record unused disks in proxmox. This is intended to be read-only for now.
        /// </summary>
        [Output("unusedDisks")]
        public Output<ImmutableArray<Outputs.QemuVMUnusedDisk>> UnusedDisks { get; private set; } = null!;

        [Output("vcpus")]
        public Output<int?> Vcpus { get; private set; } = null!;

        [Output("vgas")]
        public Output<ImmutableArray<Outputs.QemuVMVga>> Vgas { get; private set; } = null!;

        [Output("vlan")]
        public Output<int?> Vlan { get; private set; } = null!;

        [Output("vmid")]
        public Output<int> Vmid { get; private set; } = null!;


        /// <summary>
        /// Create a QemuVM resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public QemuVM(string name, QemuVMArgs args, CustomResourceOptions? options = null)
            : base("proxmoxve:index/qemuVM:QemuVM", name, args ?? new QemuVMArgs(), MakeResourceOptions(options, ""))
        {
        }

        private QemuVM(string name, Input<string> id, QemuVMState? state = null, CustomResourceOptions? options = null)
            : base("proxmoxve:index/qemuVM:QemuVM", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing QemuVM resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static QemuVM Get(string name, Input<string> id, QemuVMState? state = null, CustomResourceOptions? options = null)
        {
            return new QemuVM(name, id, state, options);
        }
    }

    public sealed class QemuVMArgs : Pulumi.ResourceArgs
    {
        [Input("agent")]
        public Input<int>? Agent { get; set; }

        [Input("balloon")]
        public Input<int>? Balloon { get; set; }

        [Input("bios")]
        public Input<string>? Bios { get; set; }

        [Input("boot")]
        public Input<string>? Boot { get; set; }

        [Input("bootdisk")]
        public Input<string>? Bootdisk { get; set; }

        [Input("bridge")]
        public Input<string>? Bridge { get; set; }

        [Input("ciWait")]
        public Input<int>? CiWait { get; set; }

        [Input("cicustom")]
        public Input<string>? Cicustom { get; set; }

        [Input("cipassword")]
        public Input<string>? Cipassword { get; set; }

        [Input("ciuser")]
        public Input<string>? Ciuser { get; set; }

        [Input("clone")]
        public Input<string>? Clone { get; set; }

        [Input("cloneWait")]
        public Input<int>? CloneWait { get; set; }

        [Input("cores")]
        public Input<int>? Cores { get; set; }

        [Input("cpu")]
        public Input<string>? Cpu { get; set; }

        [Input("defineConnectionInfo")]
        public Input<bool>? DefineConnectionInfo { get; set; }

        [Input("desc")]
        public Input<string>? Desc { get; set; }

        [Input("diskGb")]
        public Input<double>? DiskGb { get; set; }

        [Input("disks")]
        private InputList<Inputs.QemuVMDiskArgs>? _disks;
        public InputList<Inputs.QemuVMDiskArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.QemuVMDiskArgs>());
            set => _disks = value;
        }

        [Input("forceCreate")]
        public Input<bool>? ForceCreate { get; set; }

        [Input("forceRecreateOnChangeOf")]
        public Input<string>? ForceRecreateOnChangeOf { get; set; }

        [Input("fullClone")]
        public Input<bool>? FullClone { get; set; }

        [Input("hastate")]
        public Input<string>? Hastate { get; set; }

        [Input("hotplug")]
        public Input<string>? Hotplug { get; set; }

        [Input("ipconfig0")]
        public Input<string>? Ipconfig0 { get; set; }

        [Input("ipconfig1")]
        public Input<string>? Ipconfig1 { get; set; }

        [Input("ipconfig2")]
        public Input<string>? Ipconfig2 { get; set; }

        [Input("iso")]
        public Input<string>? Iso { get; set; }

        [Input("kvm")]
        public Input<bool>? Kvm { get; set; }

        [Input("mac")]
        public Input<string>? Mac { get; set; }

        [Input("memory")]
        public Input<int>? Memory { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameserver")]
        public Input<string>? Nameserver { get; set; }

        [Input("networks")]
        private InputList<Inputs.QemuVMNetworkArgs>? _networks;
        public InputList<Inputs.QemuVMNetworkArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.QemuVMNetworkArgs>());
            set => _networks = value;
        }

        [Input("nic")]
        public Input<string>? Nic { get; set; }

        [Input("numa")]
        public Input<bool>? Numa { get; set; }

        [Input("onboot")]
        public Input<bool>? Onboot { get; set; }

        [Input("osNetworkConfig")]
        public Input<string>? OsNetworkConfig { get; set; }

        [Input("osType")]
        public Input<string>? OsType { get; set; }

        [Input("pool")]
        public Input<string>? Pool { get; set; }

        [Input("preprovision")]
        public Input<bool>? Preprovision { get; set; }

        [Input("qemuOs")]
        public Input<string>? QemuOs { get; set; }

        [Input("scsihw")]
        public Input<string>? Scsihw { get; set; }

        [Input("searchdomain")]
        public Input<string>? Searchdomain { get; set; }

        [Input("serials")]
        private InputList<Inputs.QemuVMSerialArgs>? _serials;
        public InputList<Inputs.QemuVMSerialArgs> Serials
        {
            get => _serials ?? (_serials = new InputList<Inputs.QemuVMSerialArgs>());
            set => _serials = value;
        }

        [Input("sockets")]
        public Input<int>? Sockets { get; set; }

        [Input("sshForwardIp")]
        public Input<string>? SshForwardIp { get; set; }

        [Input("sshPrivateKey")]
        public Input<string>? SshPrivateKey { get; set; }

        [Input("sshUser")]
        public Input<string>? SshUser { get; set; }

        [Input("sshkeys")]
        public Input<string>? Sshkeys { get; set; }

        [Input("storage")]
        public Input<string>? Storage { get; set; }

        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        [Input("targetNode", required: true)]
        public Input<string> TargetNode { get; set; } = null!;

        [Input("vcpus")]
        public Input<int>? Vcpus { get; set; }

        [Input("vgas")]
        private InputList<Inputs.QemuVMVgaArgs>? _vgas;
        public InputList<Inputs.QemuVMVgaArgs> Vgas
        {
            get => _vgas ?? (_vgas = new InputList<Inputs.QemuVMVgaArgs>());
            set => _vgas = value;
        }

        [Input("vlan")]
        public Input<int>? Vlan { get; set; }

        [Input("vmid")]
        public Input<int>? Vmid { get; set; }

        public QemuVMArgs()
        {
        }
    }

    public sealed class QemuVMState : Pulumi.ResourceArgs
    {
        [Input("agent")]
        public Input<int>? Agent { get; set; }

        [Input("balloon")]
        public Input<int>? Balloon { get; set; }

        [Input("bios")]
        public Input<string>? Bios { get; set; }

        [Input("boot")]
        public Input<string>? Boot { get; set; }

        [Input("bootdisk")]
        public Input<string>? Bootdisk { get; set; }

        [Input("bridge")]
        public Input<string>? Bridge { get; set; }

        [Input("ciWait")]
        public Input<int>? CiWait { get; set; }

        [Input("cicustom")]
        public Input<string>? Cicustom { get; set; }

        [Input("cipassword")]
        public Input<string>? Cipassword { get; set; }

        [Input("ciuser")]
        public Input<string>? Ciuser { get; set; }

        [Input("clone")]
        public Input<string>? Clone { get; set; }

        [Input("cloneWait")]
        public Input<int>? CloneWait { get; set; }

        [Input("cores")]
        public Input<int>? Cores { get; set; }

        [Input("cpu")]
        public Input<string>? Cpu { get; set; }

        [Input("defineConnectionInfo")]
        public Input<bool>? DefineConnectionInfo { get; set; }

        [Input("desc")]
        public Input<string>? Desc { get; set; }

        [Input("diskGb")]
        public Input<double>? DiskGb { get; set; }

        [Input("disks")]
        private InputList<Inputs.QemuVMDiskGetArgs>? _disks;
        public InputList<Inputs.QemuVMDiskGetArgs> Disks
        {
            get => _disks ?? (_disks = new InputList<Inputs.QemuVMDiskGetArgs>());
            set => _disks = value;
        }

        [Input("forceCreate")]
        public Input<bool>? ForceCreate { get; set; }

        [Input("forceRecreateOnChangeOf")]
        public Input<string>? ForceRecreateOnChangeOf { get; set; }

        [Input("fullClone")]
        public Input<bool>? FullClone { get; set; }

        [Input("hastate")]
        public Input<string>? Hastate { get; set; }

        [Input("hotplug")]
        public Input<string>? Hotplug { get; set; }

        [Input("ipconfig0")]
        public Input<string>? Ipconfig0 { get; set; }

        [Input("ipconfig1")]
        public Input<string>? Ipconfig1 { get; set; }

        [Input("ipconfig2")]
        public Input<string>? Ipconfig2 { get; set; }

        [Input("iso")]
        public Input<string>? Iso { get; set; }

        [Input("kvm")]
        public Input<bool>? Kvm { get; set; }

        [Input("mac")]
        public Input<string>? Mac { get; set; }

        [Input("memory")]
        public Input<int>? Memory { get; set; }

        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("nameserver")]
        public Input<string>? Nameserver { get; set; }

        [Input("networks")]
        private InputList<Inputs.QemuVMNetworkGetArgs>? _networks;
        public InputList<Inputs.QemuVMNetworkGetArgs> Networks
        {
            get => _networks ?? (_networks = new InputList<Inputs.QemuVMNetworkGetArgs>());
            set => _networks = value;
        }

        [Input("nic")]
        public Input<string>? Nic { get; set; }

        [Input("numa")]
        public Input<bool>? Numa { get; set; }

        [Input("onboot")]
        public Input<bool>? Onboot { get; set; }

        [Input("osNetworkConfig")]
        public Input<string>? OsNetworkConfig { get; set; }

        [Input("osType")]
        public Input<string>? OsType { get; set; }

        [Input("pool")]
        public Input<string>? Pool { get; set; }

        [Input("preprovision")]
        public Input<bool>? Preprovision { get; set; }

        [Input("qemuOs")]
        public Input<string>? QemuOs { get; set; }

        [Input("scsihw")]
        public Input<string>? Scsihw { get; set; }

        [Input("searchdomain")]
        public Input<string>? Searchdomain { get; set; }

        [Input("serials")]
        private InputList<Inputs.QemuVMSerialGetArgs>? _serials;
        public InputList<Inputs.QemuVMSerialGetArgs> Serials
        {
            get => _serials ?? (_serials = new InputList<Inputs.QemuVMSerialGetArgs>());
            set => _serials = value;
        }

        [Input("sockets")]
        public Input<int>? Sockets { get; set; }

        [Input("sshForwardIp")]
        public Input<string>? SshForwardIp { get; set; }

        [Input("sshHost")]
        public Input<string>? SshHost { get; set; }

        [Input("sshPort")]
        public Input<string>? SshPort { get; set; }

        [Input("sshPrivateKey")]
        public Input<string>? SshPrivateKey { get; set; }

        [Input("sshUser")]
        public Input<string>? SshUser { get; set; }

        [Input("sshkeys")]
        public Input<string>? Sshkeys { get; set; }

        [Input("storage")]
        public Input<string>? Storage { get; set; }

        [Input("storageType")]
        public Input<string>? StorageType { get; set; }

        [Input("targetNode")]
        public Input<string>? TargetNode { get; set; }

        [Input("unusedDisks")]
        private InputList<Inputs.QemuVMUnusedDiskGetArgs>? _unusedDisks;

        /// <summary>
        /// Record unused disks in proxmox. This is intended to be read-only for now.
        /// </summary>
        public InputList<Inputs.QemuVMUnusedDiskGetArgs> UnusedDisks
        {
            get => _unusedDisks ?? (_unusedDisks = new InputList<Inputs.QemuVMUnusedDiskGetArgs>());
            set => _unusedDisks = value;
        }

        [Input("vcpus")]
        public Input<int>? Vcpus { get; set; }

        [Input("vgas")]
        private InputList<Inputs.QemuVMVgaGetArgs>? _vgas;
        public InputList<Inputs.QemuVMVgaGetArgs> Vgas
        {
            get => _vgas ?? (_vgas = new InputList<Inputs.QemuVMVgaGetArgs>());
            set => _vgas = value;
        }

        [Input("vlan")]
        public Input<int>? Vlan { get; set; }

        [Input("vmid")]
        public Input<int>? Vmid { get; set; }

        public QemuVMState()
        {
        }
    }
}
