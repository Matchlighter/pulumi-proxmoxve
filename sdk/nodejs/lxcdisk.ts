// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class LXCDisk extends pulumi.CustomResource {
    /**
     * Get an existing LXCDisk resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LXCDiskState, opts?: pulumi.CustomResourceOptions): LXCDisk {
        return new LXCDisk(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:index/lXCDisk:LXCDisk';

    /**
     * Returns true if the given object is an instance of LXCDisk.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LXCDisk {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LXCDisk.__pulumiType;
    }

    public readonly acl!: pulumi.Output<boolean | undefined>;
    public readonly backup!: pulumi.Output<boolean | undefined>;
    public readonly container!: pulumi.Output<string>;
    public readonly mountoptions!: pulumi.Output<outputs.LXCDiskMountoptions | undefined>;
    public readonly mp!: pulumi.Output<string>;
    public readonly quota!: pulumi.Output<boolean | undefined>;
    public readonly replicate!: pulumi.Output<boolean | undefined>;
    public readonly shared!: pulumi.Output<boolean | undefined>;
    public readonly size!: pulumi.Output<string>;
    public readonly slot!: pulumi.Output<number>;
    public readonly storage!: pulumi.Output<string>;
    public readonly volume!: pulumi.Output<string>;

    /**
     * Create a LXCDisk resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LXCDiskArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LXCDiskArgs | LXCDiskState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as LXCDiskState | undefined;
            inputs["acl"] = state ? state.acl : undefined;
            inputs["backup"] = state ? state.backup : undefined;
            inputs["container"] = state ? state.container : undefined;
            inputs["mountoptions"] = state ? state.mountoptions : undefined;
            inputs["mp"] = state ? state.mp : undefined;
            inputs["quota"] = state ? state.quota : undefined;
            inputs["replicate"] = state ? state.replicate : undefined;
            inputs["shared"] = state ? state.shared : undefined;
            inputs["size"] = state ? state.size : undefined;
            inputs["slot"] = state ? state.slot : undefined;
            inputs["storage"] = state ? state.storage : undefined;
            inputs["volume"] = state ? state.volume : undefined;
        } else {
            const args = argsOrState as LXCDiskArgs | undefined;
            if (!args || args.container === undefined) {
                throw new Error("Missing required property 'container'");
            }
            if (!args || args.mp === undefined) {
                throw new Error("Missing required property 'mp'");
            }
            if (!args || args.size === undefined) {
                throw new Error("Missing required property 'size'");
            }
            if (!args || args.slot === undefined) {
                throw new Error("Missing required property 'slot'");
            }
            if (!args || args.storage === undefined) {
                throw new Error("Missing required property 'storage'");
            }
            inputs["acl"] = args ? args.acl : undefined;
            inputs["backup"] = args ? args.backup : undefined;
            inputs["container"] = args ? args.container : undefined;
            inputs["mountoptions"] = args ? args.mountoptions : undefined;
            inputs["mp"] = args ? args.mp : undefined;
            inputs["quota"] = args ? args.quota : undefined;
            inputs["replicate"] = args ? args.replicate : undefined;
            inputs["shared"] = args ? args.shared : undefined;
            inputs["size"] = args ? args.size : undefined;
            inputs["slot"] = args ? args.slot : undefined;
            inputs["storage"] = args ? args.storage : undefined;
            inputs["volume"] = args ? args.volume : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(LXCDisk.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LXCDisk resources.
 */
export interface LXCDiskState {
    readonly acl?: pulumi.Input<boolean>;
    readonly backup?: pulumi.Input<boolean>;
    readonly container?: pulumi.Input<string>;
    readonly mountoptions?: pulumi.Input<inputs.LXCDiskMountoptions>;
    readonly mp?: pulumi.Input<string>;
    readonly quota?: pulumi.Input<boolean>;
    readonly replicate?: pulumi.Input<boolean>;
    readonly shared?: pulumi.Input<boolean>;
    readonly size?: pulumi.Input<string>;
    readonly slot?: pulumi.Input<number>;
    readonly storage?: pulumi.Input<string>;
    readonly volume?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LXCDisk resource.
 */
export interface LXCDiskArgs {
    readonly acl?: pulumi.Input<boolean>;
    readonly backup?: pulumi.Input<boolean>;
    readonly container: pulumi.Input<string>;
    readonly mountoptions?: pulumi.Input<inputs.LXCDiskMountoptions>;
    readonly mp: pulumi.Input<string>;
    readonly quota?: pulumi.Input<boolean>;
    readonly replicate?: pulumi.Input<boolean>;
    readonly shared?: pulumi.Input<boolean>;
    readonly size: pulumi.Input<string>;
    readonly slot: pulumi.Input<number>;
    readonly storage: pulumi.Input<string>;
    readonly volume?: pulumi.Input<string>;
}
