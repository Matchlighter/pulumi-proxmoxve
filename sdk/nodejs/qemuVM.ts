// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

export class QemuVM extends pulumi.CustomResource {
    /**
     * Get an existing QemuVM resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: QemuVMState, opts?: pulumi.CustomResourceOptions): QemuVM {
        return new QemuVM(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'proxmoxve:index/qemuVM:QemuVM';

    /**
     * Returns true if the given object is an instance of QemuVM.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is QemuVM {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === QemuVM.__pulumiType;
    }

    public readonly agent!: pulumi.Output<number | undefined>;
    public readonly balloon!: pulumi.Output<number | undefined>;
    public readonly bios!: pulumi.Output<string | undefined>;
    public readonly boot!: pulumi.Output<string | undefined>;
    public readonly bootdisk!: pulumi.Output<string>;
    /**
     * @deprecated Use `network.bridge` instead
     */
    public readonly bridge!: pulumi.Output<string | undefined>;
    public readonly ciWait!: pulumi.Output<number | undefined>;
    public readonly cicustom!: pulumi.Output<string | undefined>;
    public readonly cipassword!: pulumi.Output<string | undefined>;
    public readonly ciuser!: pulumi.Output<string | undefined>;
    public readonly clone!: pulumi.Output<string | undefined>;
    public readonly cloneWait!: pulumi.Output<number | undefined>;
    public readonly cores!: pulumi.Output<number | undefined>;
    public readonly cpu!: pulumi.Output<string | undefined>;
    public readonly defineConnectionInfo!: pulumi.Output<boolean | undefined>;
    public readonly desc!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Use `disk.size` instead
     */
    public readonly diskGb!: pulumi.Output<number | undefined>;
    public readonly disks!: pulumi.Output<outputs.QemuVMDisk[] | undefined>;
    public readonly forceCreate!: pulumi.Output<boolean | undefined>;
    public readonly forceRecreateOnChangeOf!: pulumi.Output<string | undefined>;
    public readonly fullClone!: pulumi.Output<boolean | undefined>;
    public readonly hastate!: pulumi.Output<string | undefined>;
    public readonly hotplug!: pulumi.Output<string | undefined>;
    public readonly ipconfig0!: pulumi.Output<string | undefined>;
    public readonly ipconfig1!: pulumi.Output<string | undefined>;
    public readonly ipconfig2!: pulumi.Output<string | undefined>;
    public readonly iso!: pulumi.Output<string | undefined>;
    public readonly kvm!: pulumi.Output<boolean | undefined>;
    /**
     * @deprecated Use `network.macaddr` to access the auto generated MAC address
     */
    public readonly mac!: pulumi.Output<string | undefined>;
    public readonly memory!: pulumi.Output<number | undefined>;
    public readonly name!: pulumi.Output<string>;
    public readonly nameserver!: pulumi.Output<string>;
    public readonly networks!: pulumi.Output<outputs.QemuVMNetwork[] | undefined>;
    /**
     * @deprecated Use `network` instead
     */
    public readonly nic!: pulumi.Output<string | undefined>;
    public readonly numa!: pulumi.Output<boolean | undefined>;
    public readonly onboot!: pulumi.Output<boolean | undefined>;
    public readonly osNetworkConfig!: pulumi.Output<string | undefined>;
    public readonly osType!: pulumi.Output<string | undefined>;
    public readonly pool!: pulumi.Output<string | undefined>;
    public readonly preprovision!: pulumi.Output<boolean | undefined>;
    public readonly qemuOs!: pulumi.Output<string | undefined>;
    public readonly scsihw!: pulumi.Output<string>;
    public readonly searchdomain!: pulumi.Output<string>;
    public readonly serials!: pulumi.Output<outputs.QemuVMSerial[] | undefined>;
    public readonly sockets!: pulumi.Output<number | undefined>;
    public readonly sshForwardIp!: pulumi.Output<string | undefined>;
    public /*out*/ readonly sshHost!: pulumi.Output<string>;
    public /*out*/ readonly sshPort!: pulumi.Output<string>;
    public readonly sshPrivateKey!: pulumi.Output<string | undefined>;
    public readonly sshUser!: pulumi.Output<string | undefined>;
    public readonly sshkeys!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Use `disk.storage` instead
     */
    public readonly storage!: pulumi.Output<string | undefined>;
    /**
     * @deprecated Use `disk.type` instead
     */
    public readonly storageType!: pulumi.Output<string | undefined>;
    public readonly targetNode!: pulumi.Output<string>;
    /**
     * Record unused disks in proxmox. This is intended to be read-only for now.
     */
    public /*out*/ readonly unusedDisks!: pulumi.Output<outputs.QemuVMUnusedDisk[]>;
    public readonly vcpus!: pulumi.Output<number | undefined>;
    public readonly vgas!: pulumi.Output<outputs.QemuVMVga[] | undefined>;
    /**
     * @deprecated Use `network.tag` instead
     */
    public readonly vlan!: pulumi.Output<number | undefined>;
    public readonly vmid!: pulumi.Output<number>;

    /**
     * Create a QemuVM resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: QemuVMArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: QemuVMArgs | QemuVMState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as QemuVMState | undefined;
            inputs["agent"] = state ? state.agent : undefined;
            inputs["balloon"] = state ? state.balloon : undefined;
            inputs["bios"] = state ? state.bios : undefined;
            inputs["boot"] = state ? state.boot : undefined;
            inputs["bootdisk"] = state ? state.bootdisk : undefined;
            inputs["bridge"] = state ? state.bridge : undefined;
            inputs["ciWait"] = state ? state.ciWait : undefined;
            inputs["cicustom"] = state ? state.cicustom : undefined;
            inputs["cipassword"] = state ? state.cipassword : undefined;
            inputs["ciuser"] = state ? state.ciuser : undefined;
            inputs["clone"] = state ? state.clone : undefined;
            inputs["cloneWait"] = state ? state.cloneWait : undefined;
            inputs["cores"] = state ? state.cores : undefined;
            inputs["cpu"] = state ? state.cpu : undefined;
            inputs["defineConnectionInfo"] = state ? state.defineConnectionInfo : undefined;
            inputs["desc"] = state ? state.desc : undefined;
            inputs["diskGb"] = state ? state.diskGb : undefined;
            inputs["disks"] = state ? state.disks : undefined;
            inputs["forceCreate"] = state ? state.forceCreate : undefined;
            inputs["forceRecreateOnChangeOf"] = state ? state.forceRecreateOnChangeOf : undefined;
            inputs["fullClone"] = state ? state.fullClone : undefined;
            inputs["hastate"] = state ? state.hastate : undefined;
            inputs["hotplug"] = state ? state.hotplug : undefined;
            inputs["ipconfig0"] = state ? state.ipconfig0 : undefined;
            inputs["ipconfig1"] = state ? state.ipconfig1 : undefined;
            inputs["ipconfig2"] = state ? state.ipconfig2 : undefined;
            inputs["iso"] = state ? state.iso : undefined;
            inputs["kvm"] = state ? state.kvm : undefined;
            inputs["mac"] = state ? state.mac : undefined;
            inputs["memory"] = state ? state.memory : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["nameserver"] = state ? state.nameserver : undefined;
            inputs["networks"] = state ? state.networks : undefined;
            inputs["nic"] = state ? state.nic : undefined;
            inputs["numa"] = state ? state.numa : undefined;
            inputs["onboot"] = state ? state.onboot : undefined;
            inputs["osNetworkConfig"] = state ? state.osNetworkConfig : undefined;
            inputs["osType"] = state ? state.osType : undefined;
            inputs["pool"] = state ? state.pool : undefined;
            inputs["preprovision"] = state ? state.preprovision : undefined;
            inputs["qemuOs"] = state ? state.qemuOs : undefined;
            inputs["scsihw"] = state ? state.scsihw : undefined;
            inputs["searchdomain"] = state ? state.searchdomain : undefined;
            inputs["serials"] = state ? state.serials : undefined;
            inputs["sockets"] = state ? state.sockets : undefined;
            inputs["sshForwardIp"] = state ? state.sshForwardIp : undefined;
            inputs["sshHost"] = state ? state.sshHost : undefined;
            inputs["sshPort"] = state ? state.sshPort : undefined;
            inputs["sshPrivateKey"] = state ? state.sshPrivateKey : undefined;
            inputs["sshUser"] = state ? state.sshUser : undefined;
            inputs["sshkeys"] = state ? state.sshkeys : undefined;
            inputs["storage"] = state ? state.storage : undefined;
            inputs["storageType"] = state ? state.storageType : undefined;
            inputs["targetNode"] = state ? state.targetNode : undefined;
            inputs["unusedDisks"] = state ? state.unusedDisks : undefined;
            inputs["vcpus"] = state ? state.vcpus : undefined;
            inputs["vgas"] = state ? state.vgas : undefined;
            inputs["vlan"] = state ? state.vlan : undefined;
            inputs["vmid"] = state ? state.vmid : undefined;
        } else {
            const args = argsOrState as QemuVMArgs | undefined;
            if (!args || args.targetNode === undefined) {
                throw new Error("Missing required property 'targetNode'");
            }
            inputs["agent"] = args ? args.agent : undefined;
            inputs["balloon"] = args ? args.balloon : undefined;
            inputs["bios"] = args ? args.bios : undefined;
            inputs["boot"] = args ? args.boot : undefined;
            inputs["bootdisk"] = args ? args.bootdisk : undefined;
            inputs["bridge"] = args ? args.bridge : undefined;
            inputs["ciWait"] = args ? args.ciWait : undefined;
            inputs["cicustom"] = args ? args.cicustom : undefined;
            inputs["cipassword"] = args ? args.cipassword : undefined;
            inputs["ciuser"] = args ? args.ciuser : undefined;
            inputs["clone"] = args ? args.clone : undefined;
            inputs["cloneWait"] = args ? args.cloneWait : undefined;
            inputs["cores"] = args ? args.cores : undefined;
            inputs["cpu"] = args ? args.cpu : undefined;
            inputs["defineConnectionInfo"] = args ? args.defineConnectionInfo : undefined;
            inputs["desc"] = args ? args.desc : undefined;
            inputs["diskGb"] = args ? args.diskGb : undefined;
            inputs["disks"] = args ? args.disks : undefined;
            inputs["forceCreate"] = args ? args.forceCreate : undefined;
            inputs["forceRecreateOnChangeOf"] = args ? args.forceRecreateOnChangeOf : undefined;
            inputs["fullClone"] = args ? args.fullClone : undefined;
            inputs["hastate"] = args ? args.hastate : undefined;
            inputs["hotplug"] = args ? args.hotplug : undefined;
            inputs["ipconfig0"] = args ? args.ipconfig0 : undefined;
            inputs["ipconfig1"] = args ? args.ipconfig1 : undefined;
            inputs["ipconfig2"] = args ? args.ipconfig2 : undefined;
            inputs["iso"] = args ? args.iso : undefined;
            inputs["kvm"] = args ? args.kvm : undefined;
            inputs["mac"] = args ? args.mac : undefined;
            inputs["memory"] = args ? args.memory : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["nameserver"] = args ? args.nameserver : undefined;
            inputs["networks"] = args ? args.networks : undefined;
            inputs["nic"] = args ? args.nic : undefined;
            inputs["numa"] = args ? args.numa : undefined;
            inputs["onboot"] = args ? args.onboot : undefined;
            inputs["osNetworkConfig"] = args ? args.osNetworkConfig : undefined;
            inputs["osType"] = args ? args.osType : undefined;
            inputs["pool"] = args ? args.pool : undefined;
            inputs["preprovision"] = args ? args.preprovision : undefined;
            inputs["qemuOs"] = args ? args.qemuOs : undefined;
            inputs["scsihw"] = args ? args.scsihw : undefined;
            inputs["searchdomain"] = args ? args.searchdomain : undefined;
            inputs["serials"] = args ? args.serials : undefined;
            inputs["sockets"] = args ? args.sockets : undefined;
            inputs["sshForwardIp"] = args ? args.sshForwardIp : undefined;
            inputs["sshPrivateKey"] = args ? args.sshPrivateKey : undefined;
            inputs["sshUser"] = args ? args.sshUser : undefined;
            inputs["sshkeys"] = args ? args.sshkeys : undefined;
            inputs["storage"] = args ? args.storage : undefined;
            inputs["storageType"] = args ? args.storageType : undefined;
            inputs["targetNode"] = args ? args.targetNode : undefined;
            inputs["vcpus"] = args ? args.vcpus : undefined;
            inputs["vgas"] = args ? args.vgas : undefined;
            inputs["vlan"] = args ? args.vlan : undefined;
            inputs["vmid"] = args ? args.vmid : undefined;
            inputs["sshHost"] = undefined /*out*/;
            inputs["sshPort"] = undefined /*out*/;
            inputs["unusedDisks"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(QemuVM.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering QemuVM resources.
 */
export interface QemuVMState {
    readonly agent?: pulumi.Input<number>;
    readonly balloon?: pulumi.Input<number>;
    readonly bios?: pulumi.Input<string>;
    readonly boot?: pulumi.Input<string>;
    readonly bootdisk?: pulumi.Input<string>;
    /**
     * @deprecated Use `network.bridge` instead
     */
    readonly bridge?: pulumi.Input<string>;
    readonly ciWait?: pulumi.Input<number>;
    readonly cicustom?: pulumi.Input<string>;
    readonly cipassword?: pulumi.Input<string>;
    readonly ciuser?: pulumi.Input<string>;
    readonly clone?: pulumi.Input<string>;
    readonly cloneWait?: pulumi.Input<number>;
    readonly cores?: pulumi.Input<number>;
    readonly cpu?: pulumi.Input<string>;
    readonly defineConnectionInfo?: pulumi.Input<boolean>;
    readonly desc?: pulumi.Input<string>;
    /**
     * @deprecated Use `disk.size` instead
     */
    readonly diskGb?: pulumi.Input<number>;
    readonly disks?: pulumi.Input<pulumi.Input<inputs.QemuVMDisk>[]>;
    readonly forceCreate?: pulumi.Input<boolean>;
    readonly forceRecreateOnChangeOf?: pulumi.Input<string>;
    readonly fullClone?: pulumi.Input<boolean>;
    readonly hastate?: pulumi.Input<string>;
    readonly hotplug?: pulumi.Input<string>;
    readonly ipconfig0?: pulumi.Input<string>;
    readonly ipconfig1?: pulumi.Input<string>;
    readonly ipconfig2?: pulumi.Input<string>;
    readonly iso?: pulumi.Input<string>;
    readonly kvm?: pulumi.Input<boolean>;
    /**
     * @deprecated Use `network.macaddr` to access the auto generated MAC address
     */
    readonly mac?: pulumi.Input<string>;
    readonly memory?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly nameserver?: pulumi.Input<string>;
    readonly networks?: pulumi.Input<pulumi.Input<inputs.QemuVMNetwork>[]>;
    /**
     * @deprecated Use `network` instead
     */
    readonly nic?: pulumi.Input<string>;
    readonly numa?: pulumi.Input<boolean>;
    readonly onboot?: pulumi.Input<boolean>;
    readonly osNetworkConfig?: pulumi.Input<string>;
    readonly osType?: pulumi.Input<string>;
    readonly pool?: pulumi.Input<string>;
    readonly preprovision?: pulumi.Input<boolean>;
    readonly qemuOs?: pulumi.Input<string>;
    readonly scsihw?: pulumi.Input<string>;
    readonly searchdomain?: pulumi.Input<string>;
    readonly serials?: pulumi.Input<pulumi.Input<inputs.QemuVMSerial>[]>;
    readonly sockets?: pulumi.Input<number>;
    readonly sshForwardIp?: pulumi.Input<string>;
    readonly sshHost?: pulumi.Input<string>;
    readonly sshPort?: pulumi.Input<string>;
    readonly sshPrivateKey?: pulumi.Input<string>;
    readonly sshUser?: pulumi.Input<string>;
    readonly sshkeys?: pulumi.Input<string>;
    /**
     * @deprecated Use `disk.storage` instead
     */
    readonly storage?: pulumi.Input<string>;
    /**
     * @deprecated Use `disk.type` instead
     */
    readonly storageType?: pulumi.Input<string>;
    readonly targetNode?: pulumi.Input<string>;
    /**
     * Record unused disks in proxmox. This is intended to be read-only for now.
     */
    readonly unusedDisks?: pulumi.Input<pulumi.Input<inputs.QemuVMUnusedDisk>[]>;
    readonly vcpus?: pulumi.Input<number>;
    readonly vgas?: pulumi.Input<pulumi.Input<inputs.QemuVMVga>[]>;
    /**
     * @deprecated Use `network.tag` instead
     */
    readonly vlan?: pulumi.Input<number>;
    readonly vmid?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a QemuVM resource.
 */
export interface QemuVMArgs {
    readonly agent?: pulumi.Input<number>;
    readonly balloon?: pulumi.Input<number>;
    readonly bios?: pulumi.Input<string>;
    readonly boot?: pulumi.Input<string>;
    readonly bootdisk?: pulumi.Input<string>;
    /**
     * @deprecated Use `network.bridge` instead
     */
    readonly bridge?: pulumi.Input<string>;
    readonly ciWait?: pulumi.Input<number>;
    readonly cicustom?: pulumi.Input<string>;
    readonly cipassword?: pulumi.Input<string>;
    readonly ciuser?: pulumi.Input<string>;
    readonly clone?: pulumi.Input<string>;
    readonly cloneWait?: pulumi.Input<number>;
    readonly cores?: pulumi.Input<number>;
    readonly cpu?: pulumi.Input<string>;
    readonly defineConnectionInfo?: pulumi.Input<boolean>;
    readonly desc?: pulumi.Input<string>;
    /**
     * @deprecated Use `disk.size` instead
     */
    readonly diskGb?: pulumi.Input<number>;
    readonly disks?: pulumi.Input<pulumi.Input<inputs.QemuVMDisk>[]>;
    readonly forceCreate?: pulumi.Input<boolean>;
    readonly forceRecreateOnChangeOf?: pulumi.Input<string>;
    readonly fullClone?: pulumi.Input<boolean>;
    readonly hastate?: pulumi.Input<string>;
    readonly hotplug?: pulumi.Input<string>;
    readonly ipconfig0?: pulumi.Input<string>;
    readonly ipconfig1?: pulumi.Input<string>;
    readonly ipconfig2?: pulumi.Input<string>;
    readonly iso?: pulumi.Input<string>;
    readonly kvm?: pulumi.Input<boolean>;
    /**
     * @deprecated Use `network.macaddr` to access the auto generated MAC address
     */
    readonly mac?: pulumi.Input<string>;
    readonly memory?: pulumi.Input<number>;
    readonly name?: pulumi.Input<string>;
    readonly nameserver?: pulumi.Input<string>;
    readonly networks?: pulumi.Input<pulumi.Input<inputs.QemuVMNetwork>[]>;
    /**
     * @deprecated Use `network` instead
     */
    readonly nic?: pulumi.Input<string>;
    readonly numa?: pulumi.Input<boolean>;
    readonly onboot?: pulumi.Input<boolean>;
    readonly osNetworkConfig?: pulumi.Input<string>;
    readonly osType?: pulumi.Input<string>;
    readonly pool?: pulumi.Input<string>;
    readonly preprovision?: pulumi.Input<boolean>;
    readonly qemuOs?: pulumi.Input<string>;
    readonly scsihw?: pulumi.Input<string>;
    readonly searchdomain?: pulumi.Input<string>;
    readonly serials?: pulumi.Input<pulumi.Input<inputs.QemuVMSerial>[]>;
    readonly sockets?: pulumi.Input<number>;
    readonly sshForwardIp?: pulumi.Input<string>;
    readonly sshPrivateKey?: pulumi.Input<string>;
    readonly sshUser?: pulumi.Input<string>;
    readonly sshkeys?: pulumi.Input<string>;
    /**
     * @deprecated Use `disk.storage` instead
     */
    readonly storage?: pulumi.Input<string>;
    /**
     * @deprecated Use `disk.type` instead
     */
    readonly storageType?: pulumi.Input<string>;
    readonly targetNode: pulumi.Input<string>;
    readonly vcpus?: pulumi.Input<number>;
    readonly vgas?: pulumi.Input<pulumi.Input<inputs.QemuVMVga>[]>;
    /**
     * @deprecated Use `network.tag` instead
     */
    readonly vlan?: pulumi.Input<number>;
    readonly vmid?: pulumi.Input<number>;
}
